<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>EFAVDB - Programming</title><link href="https://efavdb.github.io/" rel="alternate"></link><link href="https://efavdb.github.io/feeds/programming.atom.xml" rel="self"></link><id>https://efavdb.github.io/</id><updated>2019-09-14T22:31:00-07:00</updated><subtitle>Everybody's Favorite Data Blog</subtitle><entry><title>TimeMarker class for python</title><link href="https://efavdb.github.io/timemarker-class-for-python" rel="alternate"></link><published>2019-09-14T22:31:00-07:00</published><updated>2019-09-14T22:31:00-07:00</updated><author><name>Jonathan Landy</name></author><id>tag:efavdb.github.io,2019-09-14:/timemarker-class-for-python</id><summary type="html">&lt;p&gt;We give a simple class for marking the time at different points in a code block and then printing out the time gaps between adjacent marked points. This is useful for identifying slow spots in&amp;nbsp;code.&lt;/p&gt;
&lt;h2&gt;The TimeMarker&amp;nbsp;class&lt;/h2&gt;
&lt;p&gt;In the past, whenever I needed to speed up a block …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We give a simple class for marking the time at different points in a code block and then printing out the time gaps between adjacent marked points. This is useful for identifying slow spots in&amp;nbsp;code.&lt;/p&gt;
&lt;h2&gt;The TimeMarker&amp;nbsp;class&lt;/h2&gt;
&lt;p&gt;In the past, whenever I needed to speed up a block of python code, the first thing I would do was import the time package, then manually insert a set of lines of the form &lt;code&gt;t1 = time.time()&lt;/code&gt;, &lt;code&gt;t2 = time.time()&lt;/code&gt;, etc. Then at the end, &lt;code&gt;print t2 - t1, t3 -t2, ...&lt;/code&gt;, etc. This works reasonably well, but I found it annoying and time consuming to have to save each time point to a different variable name. In particular, this prevented quick copy and paste of the time marker line. I finally thought to fix it this evening: Behold the &lt;code&gt;TimeMarker&lt;/code&gt; class, which solves this problem for&amp;nbsp;me:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TimeMarker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_markers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]):&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is a simple code&amp;nbsp;example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeMarker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;tm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;tm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;tm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;tm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_markers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="p"&gt;...)&lt;/span&gt;  
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;9870223999&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;  
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0279731750488&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The key here is that I can quickly paste the &lt;code&gt;tm.mark()&lt;/code&gt; repeatedly throughout my code and quickly check where the slow part&amp;nbsp;sits.&lt;/p&gt;</content><category term="Programming"></category><category term="programming"></category><category term="python"></category><category term="tools"></category></entry><entry><title>Simple python to LaTeX parser</title><link href="https://efavdb.github.io/simple-python-to-latex-parser" rel="alternate"></link><published>2016-11-18T12:59:00-08:00</published><updated>2016-11-18T12:59:00-08:00</updated><author><name>Jonathan Landy</name></author><id>tag:efavdb.github.io,2016-11-18:/simple-python-to-latex-parser</id><summary type="html">&lt;p&gt;We demo a script that converts python numerical commands to LaTeX format. A notebook available on our GitHub page will take this and pretty print the&amp;nbsp;result.&lt;/p&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Here, we provide a simple script that accepts numerical python commands in string format and converts them into LaTeX markup. An example …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We demo a script that converts python numerical commands to LaTeX format. A notebook available on our GitHub page will take this and pretty print the&amp;nbsp;result.&lt;/p&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Here, we provide a simple script that accepts numerical python commands in string format and converts them into LaTeX markup. An example input / output&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;s = &amp;#39;f(x_123, 2) / (2 + 3/(1 + z(np.sqrt((x + 3)/3)))) + np.sqrt(2 ** w) * np.tanh(2 * math.pi* x)&amp;#39;  &lt;/span&gt;
&lt;span class="x"&gt;print command_to_latex(s)&lt;/span&gt;

&lt;span class="x"&gt;## output:  &lt;/span&gt;
&lt;span class="x"&gt;\frac{f \left ({x}_{123} , 2 \right )}{2 + \frac{3}{1 + z \left ( \sqrt{\frac{x + 3}{3}} \right )}} + \sqrt&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;w&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; \cdot \tanh \left (2 \cdot \pi \cdot x \right )  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the output shown here is plugged into a LaTeX editor, we get the following&amp;nbsp;result:&lt;/p&gt;
&lt;div class="math"&gt;$$\tag{1}  
\frac{f \left ({x}_{123} , 2 \right )}{2 + \frac{3}{1 + z \left ( \sqrt{\frac{x + 3}{3}} \right )}} + \sqrt{{2}^{w}} \cdot \tanh \left (2 \cdot \pi \cdot x \right )  
$$&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
Our Jupyter &lt;a href="https://github.com/EFavDB/python_command_to_latex"&gt;notebook&lt;/a&gt; automatically pretty prints to this&amp;nbsp;form.&lt;/p&gt;
&lt;p&gt;We provide the script here as it may be useful for two sorts of applications: 1) facilitating write-ups of completed projects, and 2) visualizing typed-up formulas to aid checks of their accuracy. The latter is particularly helpful for lengthy commands, which are often hard to read in python&amp;nbsp;format.&lt;/p&gt;
&lt;p&gt;We note that the python package sympy also provides a simple command-to-latex parser. However, I have had trouble getting it to output results if any functions appear that have not been defined &amp;#8212; we illustrate this issue in the&amp;nbsp;notebook.&lt;/p&gt;
&lt;p&gt;As usual, our code can be downloaded from our github page &lt;a href="https://github.com/EFavDB/python_command_to_latex"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;p&gt;The main code segment follows. The method command_to_latex recursively computes the LaTeX for any combinations of variables grouped together via parentheses. The base case occurs when there are no parentheses left, at which point the method parse_simple_eqn is called, which converts simple commands to LaTeX. The results are then recombined within the recursive method. Additional replacements can be easily added in the appropriate lines&amp;nbsp;below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;def parse_simple_eqn(q):  &lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;&amp;quot;&amp;quot; Return TeX equivalent of a command  &lt;/span&gt;
&lt;span class="x"&gt;without parentheses. &amp;quot;&amp;quot;&amp;quot;  &lt;/span&gt;
&lt;span class="x"&gt;# Define replacement rules.  &lt;/span&gt;
&lt;span class="x"&gt;simple_replacements = [[&amp;#39; &amp;#39;, &amp;#39;&amp;#39;],  &lt;/span&gt;
&lt;span class="x"&gt;[&amp;#39;**&amp;#39;, &amp;#39;^&amp;#39;], [&amp;#39;*&amp;#39;, &amp;#39; \cdot &amp;#39;],  &lt;/span&gt;
&lt;span class="x"&gt;[&amp;#39;math.&amp;#39;, &amp;#39;&amp;#39;], [&amp;#39;np.&amp;#39;, &amp;#39;&amp;#39;],  &lt;/span&gt;
&lt;span class="x"&gt;[&amp;#39;pi&amp;#39;, &amp;#39;\pi&amp;#39;] , [&amp;#39;tan&amp;#39;, &amp;#39;\tan&amp;#39;],  &lt;/span&gt;
&lt;span class="x"&gt;[&amp;#39;cos&amp;#39;, &amp;#39;\cos&amp;#39;], [&amp;#39;sin&amp;#39;, &amp;#39;\sin&amp;#39;],  &lt;/span&gt;
&lt;span class="x"&gt;[&amp;#39;sec&amp;#39;, &amp;#39;\sec&amp;#39;], [&amp;#39;csc&amp;#39;, &amp;#39;\csc&amp;#39;]]  &lt;/span&gt;
&lt;span class="x"&gt;complex_replacements = [[&amp;#39;^&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;i1&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;}^&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;i2&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;}&amp;#39;],  &lt;/span&gt;
&lt;span class="x"&gt;[&amp;#39;_&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;i1&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;}_&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;i2&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;}&amp;#39;],  &lt;/span&gt;
&lt;span class="x"&gt;[&amp;#39;/&amp;#39;, &amp;#39;\frac&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;i1&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;}&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;i2&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;}&amp;#39;],  &lt;/span&gt;
&lt;span class="x"&gt;[&amp;#39;sqrt&amp;#39;,&amp;#39;\sqrt&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;i2&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;}&amp;#39;]]  &lt;/span&gt;
&lt;span class="x"&gt;# Carry out simple replacements  &lt;/span&gt;
&lt;span class="x"&gt;for pair in simple_replacements:  &lt;/span&gt;
&lt;span class="x"&gt;q = q.replace(pair[0], pair[1])  &lt;/span&gt;
&lt;span class="x"&gt;# Now complex replacements  &lt;/span&gt;
&lt;span class="x"&gt;for item in [&amp;#39;*&amp;#39;, &amp;#39;/&amp;#39;, &amp;#39;+&amp;#39;, &amp;#39;-&amp;#39;, &amp;#39;^&amp;#39;, &amp;#39;_&amp;#39;, &amp;#39;,&amp;#39;, &amp;#39;sqrt&amp;#39;]:  &lt;/span&gt;
&lt;span class="x"&gt;q = q.replace(item, &amp;#39; &amp;#39; + item + &amp;#39; &amp;#39;)  &lt;/span&gt;
&lt;span class="x"&gt;q_split = q.split()  &lt;/span&gt;
&lt;span class="x"&gt;for index, item in enumerate(q_split):  &lt;/span&gt;
&lt;span class="x"&gt;for pair in complex_replacements:  &lt;/span&gt;
&lt;span class="x"&gt;if item == pair[0]:  &lt;/span&gt;
&lt;span class="x"&gt;if item == &amp;#39;sqrt&amp;#39;:  &lt;/span&gt;
&lt;span class="x"&gt;match_str = &amp;quot; &amp;quot;.join(q_split[index:index+2])  &lt;/span&gt;
&lt;span class="x"&gt;else:  &lt;/span&gt;
&lt;span class="x"&gt;match_str = &amp;quot; &amp;quot;.join(q_split[index-1:index+2])  &lt;/span&gt;
&lt;span class="x"&gt;q = q.replace(match_str, pair[1].format(  &lt;/span&gt;
&lt;span class="x"&gt;i1=q_split[index-1], i2=q_split[index+1]))  &lt;/span&gt;
&lt;span class="x"&gt;return q&lt;/span&gt;

&lt;span class="x"&gt;def command_to_latex(q, index=0):  &lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;&amp;quot;&amp;quot; Recursively eliminate parentheses. Once  &lt;/span&gt;
&lt;span class="x"&gt;removed, apply parse_simple_eqn. &amp;quot;&amp;quot;&amp;quot;  &lt;/span&gt;
&lt;span class="x"&gt;open_index, close_index = -1, -1  &lt;/span&gt;
&lt;span class="x"&gt;for q_index, i in enumerate(q):  &lt;/span&gt;
&lt;span class="x"&gt;if i == &amp;#39;(&amp;#39;:  &lt;/span&gt;
&lt;span class="x"&gt;open_index = q_index  &lt;/span&gt;
&lt;span class="x"&gt;elif i == &amp;#39;)&amp;#39;:  &lt;/span&gt;
&lt;span class="x"&gt;close_index = q_index  &lt;/span&gt;
&lt;span class="x"&gt;break  &lt;/span&gt;
&lt;span class="x"&gt;if open_index != -1:  &lt;/span&gt;
&lt;span class="x"&gt;o = q[:open_index] + &amp;#39;@&amp;#39; + str(index) + q[close_index + 1:]  &lt;/span&gt;
&lt;span class="x"&gt;m = q[open_index + 1:close_index]  &lt;/span&gt;
&lt;span class="x"&gt;o_tex = command_to_latex(o, index + 1)  &lt;/span&gt;
&lt;span class="x"&gt;m_tex = command_to_latex(m, index + 1)  &lt;/span&gt;
&lt;span class="x"&gt;# Clean up redundant parentheses at recombination  &lt;/span&gt;
&lt;span class="x"&gt;r_index = o_tex.find(&amp;#39;@&amp;#39; + str(index))  &lt;/span&gt;
&lt;span class="x"&gt;if o_tex[r_index - 1] == &amp;#39;{&amp;#39;:  &lt;/span&gt;
&lt;span class="x"&gt;return o_tex.replace(&amp;#39;@&amp;#39;+str(index), m_tex)  &lt;/span&gt;
&lt;span class="x"&gt;else:  &lt;/span&gt;
&lt;span class="x"&gt;return o_tex.replace(&amp;#39;@&amp;#39;+str(index),  &lt;/span&gt;
&lt;span class="x"&gt;&amp;#39; \left (&amp;#39; + m_tex + &amp;#39; \right )&amp;#39;)  &lt;/span&gt;
&lt;span class="x"&gt;else:  &lt;/span&gt;
&lt;span class="x"&gt;return parse_simple_eqn(q)  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s&amp;nbsp;it!&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Programming"></category></entry><entry><title>Dotfiles for peace of mind</title><link href="https://efavdb.github.io/dotfiles" rel="alternate"></link><published>2016-02-23T12:18:00-08:00</published><updated>2016-02-23T12:18:00-08:00</updated><author><name>Cathy Yeh</name></author><id>tag:efavdb.github.io,2016-02-23:/dotfiles</id><summary type="html">&lt;p&gt;Reinstalling software and configuring settings on a new computer is a pain. After my latest hard drive failure set the stage for yet another round of download-extract-install and configuration file twiddling, it was time to overhaul my approach. &lt;em&gt;&amp;#8220;Enough is&amp;nbsp;enough!&amp;#8221;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This post walks&amp;nbsp;through&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;how to back up and …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Reinstalling software and configuring settings on a new computer is a pain. After my latest hard drive failure set the stage for yet another round of download-extract-install and configuration file twiddling, it was time to overhaul my approach. &lt;em&gt;&amp;#8220;Enough is&amp;nbsp;enough!&amp;#8221;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This post walks&amp;nbsp;through&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;how to back up and automate the installation and configuration&amp;nbsp;process&lt;/li&gt;
&lt;li&gt;how to set up a minimal framework for data&amp;nbsp;science&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We&amp;#8217;ll use a &lt;a href="https://github.com/EFavDB/dotfiles"&gt;dotfiles repository&lt;/a&gt; on Github to illustrate both points in&amp;nbsp;parallel.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Dotfiles are named after the configuration files that start with a dot in Unix-based systems. These files are hidden from view in your home directory, but visible with a &lt;code&gt;$ ls -a&lt;/code&gt; command. Some examples are &lt;code&gt;.bashrc&lt;/code&gt; (for configuring the bash shell), &lt;code&gt;.gitconfig&lt;/code&gt; (for configuring git), and &lt;code&gt;.emacs&lt;/code&gt; (for configuring the Emacs text&amp;nbsp;editor).&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s provide a concrete example of a customization: suppose you have a hard time remembering the syntax to extract a file (&amp;#8220;Is it tar -xvf, -jxvf, or -zxvf?&amp;#8221;). If you&amp;#8217;re using a bash shell, you can define a function, &lt;code&gt;extract()&lt;/code&gt; in your &lt;code&gt;.bashrc&lt;/code&gt; file that makes life a little&amp;nbsp;easier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;extract() {  &lt;/span&gt;
&lt;span class="err"&gt;if [ -f &amp;quot;$1&amp;quot; ]; then  &lt;/span&gt;
&lt;span class="err"&gt;case &amp;quot;$1&amp;quot; in  &lt;/span&gt;
&lt;span class="err"&gt;*.tar.bz2) tar -jxvf &amp;quot;$1&amp;quot; ;;  &lt;/span&gt;
&lt;span class="err"&gt;*.tar.gz) tar -zxvf &amp;quot;$1&amp;quot; ;;  &lt;/span&gt;
&lt;span class="err"&gt;*.bz2) bunzip2 &amp;quot;$1&amp;quot; ;;  &lt;/span&gt;
&lt;span class="err"&gt;*.dmg) hdiutil mount &amp;quot;$1&amp;quot; ;;  &lt;/span&gt;
&lt;span class="err"&gt;*.gz) gunzip &amp;quot;$1&amp;quot; ;;  &lt;/span&gt;
&lt;span class="err"&gt;*.tar) tar -xvf &amp;quot;$1&amp;quot; ;;  &lt;/span&gt;
&lt;span class="err"&gt;*.tbz2) tar -jxvf &amp;quot;$1&amp;quot; ;;  &lt;/span&gt;
&lt;span class="err"&gt;*.tgz) tar -zxvf &amp;quot;$1&amp;quot; ;;  &lt;/span&gt;
&lt;span class="err"&gt;*.zip) unzip &amp;quot;$1&amp;quot; ;;  &lt;/span&gt;
&lt;span class="err"&gt;*.ZIP) unzip &amp;quot;$1&amp;quot; ;;  &lt;/span&gt;
&lt;span class="err"&gt;*.pax) cat &amp;quot;$1&amp;quot; | pax -r ;;  &lt;/span&gt;
&lt;span class="err"&gt;*.pax.Z) uncompress &amp;quot;$1&amp;quot; --stdout | pax -r ;;  &lt;/span&gt;
&lt;span class="err"&gt;*.Z) uncompress &amp;quot;$1&amp;quot; ;;  &lt;/span&gt;
&lt;span class="err"&gt;*) echo &amp;quot;&amp;#39;$1&amp;#39; cannot be extracted/mounted via extract()&amp;quot; ;;  &lt;/span&gt;
&lt;span class="err"&gt;esac  &lt;/span&gt;
&lt;span class="err"&gt;else  &lt;/span&gt;
&lt;span class="err"&gt;echo &amp;quot;&amp;#39;$1&amp;#39; is not a valid file to extract&amp;quot;  &lt;/span&gt;
&lt;span class="err"&gt;fi  &lt;/span&gt;
&lt;span class="err"&gt;}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the next time you have to extract a file &lt;code&gt;some_file.tar.bz2&lt;/code&gt;, just type &lt;code&gt;extract some_file.tar.bz2&lt;/code&gt; in bash. (This example was found in this &lt;a href="https://github.com/webpro/dotfiles/blob/master/system/.function_fs#L23"&gt;dotfiles repo&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;The structure of my dotfiles takes after the &lt;a href="https://github.com/webpro/dotfiles"&gt;repo&lt;/a&gt; described by Lars Kappert in the article &lt;a href="https://medium.com/@webprolific/getting-started-with-dotfiles-43c3602fd789#.eis4hwbff"&gt;&amp;#8220;Getting Started With Dotfiles&amp;#8221;&lt;/a&gt;. However, my repo is pared down significantly, with minor modifications for my Linux Mint system (his is &lt;span class="caps"&gt;OS&lt;/span&gt; X) and a focus on packages for data&amp;nbsp;science.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;A framework for data&amp;nbsp;science&lt;/h2&gt;
&lt;p&gt;This starter environment only has a few parts. We need a text editor &amp;#8212; preferably one that can support multiple languages encountered in data science &amp;#8212; and a way to manage scientific/statistical software&amp;nbsp;packages.&lt;/p&gt;
&lt;h3&gt;Components&lt;/h3&gt;
&lt;p&gt;The setup consists&amp;nbsp;of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; &amp;#8212; a powerful text editor that can be customized to provide an &lt;span class="caps"&gt;IDE&lt;/span&gt;-like experience for both python and R, while providing syntax highlighting for other languages, e.g. markdown, LaTeX, shell, lisp, and so on. (More on customizing Emacs in a future&amp;nbsp;post.)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://conda.pydata.org/docs/"&gt;Conda&lt;/a&gt; &amp;#8212; both a package manager and environment manager. Advantages:&lt;ul&gt;
&lt;li&gt;Packages are easy to install compared to pip, e.g. see a post by the &lt;a href="http://technicaldiscovery.blogspot.com/2013/12/why-i-promote-conda.html"&gt;author of numpy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Conda is language agnostic in terms of both managing packages and environments for different languages (as opposed to pip/virtualenv/venv). This feature is great if you use both python and&amp;nbsp;R.&lt;/li&gt;
&lt;li&gt;Standard python scientific computing libraries like numpy, scipy, matplotlib, etc. are available in the conda&amp;nbsp;repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I use the system package manager (i.e. &lt;code&gt;apt-get install ...&lt;/code&gt;) to install a few packages like git, but otherwise rely on Conda to install Python (multiple versions are okay!), R, and their&amp;nbsp;libraries.&lt;/p&gt;
&lt;p&gt;I like how clean the conda installation feels. Any packages installed by Conda, as well as different versions of Python itself, are neatly organized under the &lt;code&gt;miniconda3&lt;/code&gt; directory in my home directory. In contrast, my previous Linux setups were littered with software installations from various package managers, along with sometimes unsuccessful attempts to compile software from&amp;nbsp;source.&lt;/p&gt;
&lt;h3&gt;Workflow&lt;/h3&gt;
&lt;p&gt;My workflow with Conda follows this helpful &lt;a href="http://stiglerdiet.com/blog/2015/Nov/24/my-python-environment-workflow-with-conda/"&gt;post&lt;/a&gt; by Tim Hopper. Each project gets its own directory and is associated with an environment whose dependencies are specified by an &lt;code&gt;environment.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;For example, create a folder for a project, my_proj. Within the project folder, create a bare-bones &lt;code&gt;environment.yml&lt;/code&gt; file to specify a dependency on python 3 and&amp;nbsp;matplotlib:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my_proj&lt;/span&gt;
&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, to create the conda environment named after that directory, run &lt;code&gt;$ conda env create&lt;/code&gt; inside the my_proj directory. To activate the virtual environment, run &lt;code&gt;$ source activate my_proj&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Activating a conda environment can be further automated with &lt;a href="https://github.com/kennethreitz/autoenv"&gt;autoenv&lt;/a&gt;. Autoenv automatically activates the environment for you when you &lt;code&gt;$ cd&lt;/code&gt; into a project directory. You just need to create a &lt;code&gt;.env&lt;/code&gt; file that contains the command to activate your environment, e.g. &lt;code&gt;source activate my_proj&lt;/code&gt;, under the project&amp;nbsp;directory.&lt;/p&gt;
&lt;p&gt;Tim has written a convenient bash function, &lt;code&gt;conda-env-file&lt;/code&gt; (see &lt;a href="#conda-env-file"&gt;below&lt;/a&gt;), for generating a basic &lt;code&gt;environment.yml&lt;/code&gt; file and &lt;code&gt;.env&lt;/code&gt; file, which I&amp;#8217;ve incorporated into my own dotfiles, along with autoenv. The order of commands that I type in bash then&amp;nbsp;follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mkdir my_proj&lt;/code&gt; # create project&amp;nbsp;folder&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd my_proj&lt;/code&gt; # enter project&amp;nbsp;directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conda-env-file&lt;/code&gt; # execute homemade function to create environment.yml and&amp;nbsp;.env&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conda env create&lt;/code&gt; # conda creates an environment &amp;#8220;my_proj&amp;#8221; that is named after the project directory (using&amp;nbsp;environment.yml)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd ..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd my_proj&lt;/code&gt; # autoenv automatically activates environment (using the file .env) when you re-enter the&amp;nbsp;directory&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;The dotfiles&amp;nbsp;layout&lt;/h2&gt;
&lt;p&gt;Below is the layout of the directories and files (generated by the &lt;code&gt;tree&lt;/code&gt; command) in the &lt;a href="https://github.com/EFavDB/dotfiles"&gt;dotfiles repo&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;├── install&lt;/span&gt;
&lt;span class="err"&gt;│   ├── apt-get.sh&lt;/span&gt;
&lt;span class="err"&gt;│   ├── conda.sh&lt;/span&gt;
&lt;span class="err"&gt;│   ├── git.sh&lt;/span&gt;
&lt;span class="err"&gt;│   ├── install-emacs.sh&lt;/span&gt;
&lt;span class="err"&gt;│   └── install-miniconda.sh&lt;/span&gt;
&lt;span class="err"&gt;├── install.sh&lt;/span&gt;
&lt;span class="err"&gt;├── runcom&lt;/span&gt;
&lt;span class="err"&gt;│   ├── .bash_profile&lt;/span&gt;
&lt;span class="err"&gt;│   ├── .bashrc&lt;/span&gt;
&lt;span class="err"&gt;│   └── .profile&lt;/span&gt;
&lt;span class="err"&gt;└── system&lt;/span&gt;
&lt;span class="err"&gt;    ├── env&lt;/span&gt;
&lt;span class="err"&gt;    ├── functions&lt;/span&gt;
&lt;span class="err"&gt;    └── path&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;There any number of dotfiles that can be configured (for example, see the collection &lt;a href="http://dotfiles.github.io/"&gt;here&lt;/a&gt;), but this repo only provides customizations for the dotfiles &lt;code&gt;.profile&lt;/code&gt;, &lt;code&gt;.bash_profile&lt;/code&gt;, and &lt;code&gt;.bashrc&lt;/code&gt; &amp;#8212; located in the directory, &lt;code&gt;runcom&lt;/code&gt; (which stands for &amp;#8220;run commands&amp;#8221;) &amp;#8212; that contain commands that are executed at login or during interactive non-login shell sessions. For details about the role of shell initialization dotfiles, see the &lt;a href="#aside"&gt;end&lt;/a&gt; of this&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;Instead of putting all our customizations in one long, unwieldy dotfile, it&amp;#8217;s helpful to divide them into chunks, which we keep in the subfolder, &lt;code&gt;system&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The files &lt;code&gt;env&lt;/code&gt;, &lt;code&gt;functions&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt; are sourced in a loop by the dotfiles in &lt;code&gt;runcom&lt;/code&gt;. For example, &lt;code&gt;.bashrc&lt;/code&gt; sources &lt;code&gt;functions&lt;/code&gt; and &lt;code&gt;env&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;for DOTFILE in &amp;quot;$DOTFILES_DIR&amp;quot;/system/{functions,env}; do  &lt;/span&gt;
&lt;span class="err"&gt;[ -f &amp;quot;$DOTFILE&amp;quot; ] &amp;amp;&amp;amp; . &amp;quot;$DOTFILE&amp;quot;  &lt;/span&gt;
&lt;span class="err"&gt;done  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let&amp;#8217;s take a look at the configurations in each of these files:&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;env&lt;/strong&gt; - enables autoenv for activating virtual&amp;nbsp;environments&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;[ -f /opt/autoenv/activate.sh ] &amp;amp;&amp;amp; . /opt/autoenv/activate.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;functions&lt;/strong&gt; - defines a custom function, &lt;code&gt;conda-env-file&lt;/code&gt;, that generates an &lt;code&gt;environment.yml&lt;/code&gt; that lists the dependencies for a conda virtual environment, and a one-line file &lt;code&gt;.env&lt;/code&gt; (not to be confused with &lt;code&gt;env&lt;/code&gt; in the previous bullet point) used by autoenv. (In addition to pip and python, I include the dependencies ipython, jedi, and flake8 needed by my Emacs python &lt;span class="caps"&gt;IDE&lt;/span&gt;&amp;nbsp;setup.)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;conda&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;  
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;conda&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yml&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;autoenv&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;  
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;based&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;autoenvfilename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.env&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;condaenvfilename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;environment.yml&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;foldername&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;PWD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;condaenvfilename&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  
&lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;name: $foldername\ndependencies:\n- pip\n- python\n- ipython\n- jedi\n- flake8&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;condaenvfilename&lt;/span&gt;  
&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;$condaenvfilename created.&amp;quot;&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;  
&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;$condaenvfilename already exists.&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;autoenvfilename&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;  
&lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;source activate $foldername\n&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;autoenvfilename&lt;/span&gt;  
&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;$autoenvfilename created.&amp;quot;&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;  
&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;$autoenvfilename already exists.&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;fi&lt;/span&gt;  
&lt;span class="err"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;path&lt;/strong&gt; - prepends the miniconda3 path to the &lt;span class="caps"&gt;PATH&lt;/span&gt; environment variable. For example, calls to python will default to the Miniconda3 version (3.5.1 in my case) rather than my system version&amp;nbsp;(2.7).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;export PATH=&amp;quot;/home/$USER/miniconda3/bin:$PATH&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we&amp;#8217;re done with configuring the dotfiles in this repo (apart from Emacs, which is treated separately). We just have to create symlinks in our home directory to the dotfiles in &lt;code&gt;runcom&lt;/code&gt;, which is performed by the shell script, &lt;code&gt;install.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sfv&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;$DOTFILES_DIR/runcom/.bash_profile&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;  
&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sfv&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;$DOTFILES_DIR/runcom/.profile&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;  
&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sfv&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;$DOTFILES_DIR/runcom/.bashrc&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;

&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;In addition to setting up dotfiles symlinks, &lt;code&gt;install.sh&lt;/code&gt; automates the installation of all our data science tools via calls to each of the scripts in the &lt;code&gt;install&lt;/code&gt; subfolder. Each script is named after the mechanism of installation (i.e. &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;conda&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;) or purpose (to install Miniconda and&amp;nbsp;Emacs).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;apt-get.sh&lt;/strong&gt; - installs a handful of programs using the system package manager, including &lt;code&gt;build-essentials&lt;/code&gt;, which is needed to compile programs from source. Also enables source-code repositories (not enabled by default in Linux Mint 17), to be used for compiling emacs from&amp;nbsp;source.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;install-emacs.sh&lt;/strong&gt; - build Emacs 24.4 from source, which is needed for compatibility with the Magit plug-in (git for Emacs). At the time of writing, only Emacs 24.3 was available on the system&amp;nbsp;repo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;install-miniconda.sh&lt;/strong&gt; - &lt;a href="http://conda.pydata.org/docs/"&gt;miniconda&lt;/a&gt; includes just conda, conda-build, and python. I prefer this lightweight version to the Anaconda version, which comes with more than 150 scientific packages by default. &lt;em&gt;A note from the Miniconda downloads page: &amp;#8220;There are two variants of the installer: Miniconda is Python 2 based and Miniconda3 is Python 3 based&amp;#8230; the choice of which Miniconda is installed only affects the root environment. Regardless of which version of Miniconda you install, you can still install both Python 2.x and Python 3.x environments. The other difference is that the Python 3 version of Miniconda will default to Python 3 when creating new environments and building packages.&amp;#8221; (I chose&amp;nbsp;Miniconda3.)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;conda.sh&lt;/strong&gt; - Use conda to install popular scientific packages for python, R, some popular R packages, and packages for &lt;span class="caps"&gt;IDE&lt;/span&gt; support in&amp;nbsp;Emacs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git.sh&lt;/strong&gt; - Install &lt;a href="https://github.com/kennethreitz/autoenv"&gt;autoenv&lt;/a&gt; for working with virtual environment directories. Also clone the configurations from my &lt;a href="https://github.com/frangipane/emacs"&gt;Emacs repo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://github.com/EFavDB/dotfiles"&gt;dotfiles repo&lt;/a&gt; discussed in this post will remain in this minimal state on GitHub so that it can be easily parsed and built upon. It&amp;#8217;s the most straightforward to adopt if you are on a similar system (Linux Mint or Ubuntu 14.04), as I haven&amp;#8217;t put in checks for &lt;span class="caps"&gt;OSX&lt;/span&gt;. If you don&amp;#8217;t like Emacs, feel free to comment out the relevant lines in &lt;code&gt;install.sh&lt;/code&gt; and &lt;code&gt;install/git.sh&lt;/code&gt;, and replace with your editor of&amp;nbsp;choice.&lt;/p&gt;
&lt;p&gt;Also take a look at other collections of &lt;a href="https://github.com/webpro/awesome-dotfiles"&gt;awesome dotfiles&lt;/a&gt; for nuggets (like the &lt;code&gt;extract()&lt;/code&gt; function) to co-opt. And enjoy the peace of mind that comes with having dotfiles&amp;nbsp;insurance!&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;em&gt;Notes on shell initialization&amp;nbsp;dotfiles&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;The handling of the dotfiles .profile, .bash_profile, and .bashrc is frequently a source of &lt;a href="http://superuser.com/questions/183870/difference-between-bashrc-and-bash-profile"&gt;confusion&lt;/a&gt; that we&amp;#8217;ll try to clear up&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;For example, .profile and .bash_profile are both recommended for setting environment variables, so what&amp;#8217;s the point of having&amp;nbsp;both?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;.profile&lt;/strong&gt;&lt;br&gt;
.profile is loaded upon login to a Unix system (for most distributions) and is where you should put customizations that apply to your whole session, e.g. environment variable assignments like &lt;code&gt;PATH&lt;/code&gt; that are not specifically related to bash. .profile holds anything that should be (1) available to graphical applications &amp;#8212; like launching a program from a &lt;span class="caps"&gt;GUI&lt;/span&gt; by clicking on an icon or menu &amp;#8212; or (2) to &lt;code&gt;sh&lt;/code&gt;, which is run by graphical &lt;a href="https://wiki.archlinux.org/index.php/display_manager"&gt;display managers&lt;/a&gt; like &lt;span class="caps"&gt;GDM&lt;/span&gt;/LightDM/&lt;span class="caps"&gt;MDM&lt;/span&gt; when your computer boots up in graphics mode (the most common scenario these days). Note, even though the default login shell is bash in Ubuntu, the default system shell that is used during the bootup process in Ubuntu is &lt;a href="https://wiki.ubuntu.com/DashAsBinSh"&gt;dash, not bash&lt;/a&gt;, (&lt;code&gt;readlink -f /bin/sh&lt;/code&gt; outputs &lt;code&gt;/bin/dash&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s give a concrete example of case (1): the miniconda installer provides a default option to add the miniconda binaries to the search path in .bashrc: &lt;code&gt;export PATH="/home/$USER/miniconda3/bin:$PATH"&lt;/code&gt;. Assuming you&amp;#8217;ve used &lt;code&gt;conda&lt;/code&gt; (not &lt;code&gt;apt-get&lt;/code&gt;) to install python scientific computing libraries and have set the path in .bashrc, if Emacs is launched from an icon on the desktop, then Emacs plugins that depend on those libraries (e.g. &lt;code&gt;ein&lt;/code&gt;, a plugin that integrates IPython with Emacs) will throw an error; since the graphical invocation only loads .profile, the miniconda binaries would not be in the search path. (On the other hand, there would be no problem launching Emacs from the terminal via &lt;code&gt;$ emacs&lt;/code&gt;.) For this reason, it&amp;#8217;s preferable to add the miniconda path in .profile instead of&amp;nbsp;.bashrc.&lt;/p&gt;
&lt;p&gt;For changes to .profile to take effect, you have to log out entirely and then log back&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;.bash_profile&lt;/strong&gt;&lt;br&gt;
Like .profile, .bash_profile should contain environment variable definitions. I haven&amp;#8217;t yet encountered a situation where a configuration can be set in .bash_profile that can&amp;#8217;t be set in .profile or&amp;nbsp;.bashrc.&lt;/p&gt;
&lt;p&gt;Therefore, my .bash_profile just loads .profile and .bashrc. Some choose to bypass .bash_profile entirely and only have .profile (which bash reads if .bash_profile or .bash_login don&amp;#8217;t exist) and&amp;nbsp;.bashrc.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;.bashrc&lt;/strong&gt;&lt;br&gt;
Definitions of alias, functions, and other settings you&amp;#8217;d want in an interactive command line should be put in .bashrc. .bashrc is sourced by interactive, non-login&amp;nbsp;shells.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;login, non-login, interactive, and non-interactive&amp;nbsp;shells&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To check if you&amp;#8217;re in a login shell, type on the command line &lt;code&gt;echo $0&lt;/code&gt;. If the output is &lt;code&gt;-bash&lt;/code&gt;, then you&amp;#8217;re in a login shell. If the output is &lt;code&gt;bash&lt;/code&gt;, then it&amp;#8217;s not a login shell (see &lt;code&gt;man bash&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Usually, a shell started from a new terminal in a &lt;span class="caps"&gt;GUI&lt;/span&gt; will be an interactive, non-login shell. The notable exception is &lt;span class="caps"&gt;OSX&lt;/span&gt;, whose terminal defaults to starting login shells. Thus, an &lt;span class="caps"&gt;OSX&lt;/span&gt; user may blithely sweep customizations that would ordinarily be placed in .bashrc &amp;#8212; like aliases and functions &amp;#8212; into .bash_profile and not bother with creating a .bashrc at all. However, those settings would not be properly initialized if the terminal default is changed to non-login&amp;nbsp;shells.&lt;/li&gt;
&lt;li&gt;If you ssh in or login on a text console, then you get an interactive, login&amp;nbsp;shell.&lt;/li&gt;
&lt;li&gt;More examples in &lt;a href="http://unix.stackexchange.com/questions/38175/difference-between-login-shell-and-non-login-shell/46856#46856"&gt;this StackExchange thread&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This discussion might seem pedantic since you can often get away with a less careful setup. In my experience, though, what can go wrong will probably go wrong, so best to be&amp;nbsp;proactive.&lt;/p&gt;</content><category term="Programming"></category><category term="programming"></category><category term="tools"></category><category term="bash"></category><category term="conda"></category></entry><entry><title>Getting started with Pandas</title><link href="https://efavdb.github.io/pandas-tips-and-tricks" rel="alternate"></link><published>2015-10-05T12:00:00-07:00</published><updated>2015-10-05T12:00:00-07:00</updated><author><name>Damien RJ</name></author><id>tag:efavdb.github.io,2015-10-05:/pandas-tips-and-tricks</id><summary type="html">&lt;p&gt;We have made use of Python&amp;#8217;s Pandas package in a variety of posts on the site. These have showcased some of Pandas&amp;#8217; abilities including the&amp;nbsp;following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DataFrames for data manipulation with built in&amp;nbsp;indexing&lt;/li&gt;
&lt;li&gt;Handling of missing&amp;nbsp;data&lt;/li&gt;
&lt;li&gt;Data&amp;nbsp;alignment&lt;/li&gt;
&lt;li&gt;Melting/stacking and Pivoting/unstacking data&amp;nbsp;sets&lt;/li&gt;
&lt;li&gt;Groupby feature …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;We have made use of Python&amp;#8217;s Pandas package in a variety of posts on the site. These have showcased some of Pandas&amp;#8217; abilities including the&amp;nbsp;following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DataFrames for data manipulation with built in&amp;nbsp;indexing&lt;/li&gt;
&lt;li&gt;Handling of missing&amp;nbsp;data&lt;/li&gt;
&lt;li&gt;Data&amp;nbsp;alignment&lt;/li&gt;
&lt;li&gt;Melting/stacking and Pivoting/unstacking data&amp;nbsp;sets&lt;/li&gt;
&lt;li&gt;Groupby feature allowing split -&amp;gt; apply -&amp;gt; combine operations on data&amp;nbsp;sets&lt;/li&gt;
&lt;li&gt;Data merging and&amp;nbsp;joining&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pandas is also a high performance library, with much of its code written in Cython or C. Unfortunately, Pandas can have a bit of a steep learning curve &amp;#8212; In this post, I&amp;#8217;ll cover some introductory tips and tricks to help one get started with this excellent&amp;nbsp;package.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This post was partially inspired by Tom Augspurger&amp;#8217;s Pandas &lt;a href="https://github.com/tomaugspurger/pydataseattle"&gt;tutorial&lt;/a&gt;, which has a &lt;a href="https://www.youtube.com/watch?v=otCriSKVV_8"&gt;youtube video&lt;/a&gt; that can be viewed along side it. We also suggest some other excellent resource materials &amp;#8212; where relevant &amp;#8212;&amp;nbsp;below.&lt;/li&gt;
&lt;li&gt;The notebook we use below can be downloaded from our &lt;a href="https://github.com/EFavDB/Pandas"&gt;github page&lt;/a&gt;. Feel free to grab it and follow&amp;nbsp;along.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Jupyter (Formally IPython) notebook&amp;nbsp;tips&lt;/h3&gt;
&lt;p&gt;All the exercises I will be referring to here were carried out using IPython notebooks. To start off, here&amp;#8217;s a few quick tips on notebook navigation that can help make life easier:  First, the notebook has two modes, command and edit. If you are in edit mode you have the cursor in one of the cells (boxes) where you can enter code or text.  To enter command mode press the &lt;strong&gt;Esc&lt;/strong&gt; key and the cursor will disappear, but the cell will still be highlighted.  In command mode you have a variety of keyboard shortcuts, and you can see all of them if you press &lt;strong&gt;h&lt;/strong&gt;. &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b &lt;/strong&gt;will make new empty cells below and above the current cell.  &lt;strong&gt;j &lt;/strong&gt;/ &lt;strong&gt;k&lt;/strong&gt; will navigate through the notebook. &lt;strong&gt;Shift + Enter&lt;/strong&gt; will execute the current cell and move to the next one, while &lt;strong&gt;Ctrl + Enter&lt;/strong&gt; will execute the cell but does not move to the next cell. This is nice if you are still tweaking the code in that&amp;nbsp;cell.&lt;/p&gt;
&lt;h3&gt;Pandas is built on top of&amp;nbsp;NumPy&lt;/h3&gt;
&lt;p&gt;To understand Pandas, you gotta understand NumPy, as Pandas is built on top of it. Here, we cover some of its NumPy&amp;#8217;s basic&amp;nbsp;properties.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ndarray&lt;/strong&gt;: ndarrays are central to NumPy, and are homogeneous N-dimensional arrays of fixed-size. NumPy also provides fast methods for the ndarrary that are written in C, often making use of vectorized operations such as element wise addition and multiplication. These methods provide a major resource for code speedup, and Pandas takes full advantage of them where possible. In addition to the fast methods, ndarray also requires less memory than a python list because python lists are an array of pointers to Python objects &amp;#8212; this is what allows lists to hold mixed data types.  This overhead combined with the overhead of the Python objects vs a numpy object can add up quickly. The variabilities in data type also makes it difficult to implement efficient C-loops because every iteration would need to make a call to Python to check the data type. This leads us to the next&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data types&lt;/strong&gt;: As mentioned earlier, unlike Python&amp;#8217;s list object, NumPy arrays can only contain one data type at a time.  Giving up mixed data types allows us to achieve much better performance through efficient C-loops.  One important thing to note is that missing values (NaN) will cast integer or boolean arrays to&amp;nbsp;floats.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;#8221;&amp;#8221; align=&amp;#8221;aligncenter&amp;#8221; width=&amp;#8221;526&amp;#8221;]&lt;a href="http://docs.scipy.org/doc/numpy/_images/dtype-hierarchy.png"&gt;&lt;img alt="" src="http://docs.scipy.org/doc/numpy/_images/dtype-hierarchy.png"&gt;&lt;/a&gt; Graph showing data types in&amp;nbsp;NumPy[/caption]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Broadcasting:&lt;/strong&gt; Broadcasting describes how NumPy treats arrays with different shapes. Essentially the smaller array is “broadcast” across the larger array so that they have compatible shapes. This makes it possible to have vectorized array operations, enabling the use of C instead of Python for the looping. Broadcasting also prevents needless copies of data from being created by making a new array with repeating copies.  The simplest broadcasting example occurs when combining an array with a scaler. This is something Pandas uses for efficiency and ease of&amp;nbsp;use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;a = np.array([1.0, 2.0, 3.0])  &lt;/span&gt;
&lt;span class="err"&gt;b = 2.0  &lt;/span&gt;
&lt;span class="err"&gt;a * b  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; array([ 2., 4., 6.])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When operating on two arrays, their shapes are compared starting with the trailing dimensions. Two dimensions are compatible&amp;nbsp;when:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;they are equal,&amp;nbsp;or&lt;/li&gt;
&lt;li&gt;one of them is&amp;nbsp;1&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;a      (3d array):  15 x 3 x 5&lt;/span&gt;
&lt;span class="err"&gt;b      (2d array):       3 x 1&lt;/span&gt;
&lt;span class="err"&gt;a*b (3d array):     15 x 3 x 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For those interested, I recommend Jake Vanderplas&amp;#8217;s &lt;a href="https://www.youtube.com/watch?v=EEUXKG97YRw"&gt;talk&lt;/a&gt; for learning more about how one can reduce loop usage in your own code using&amp;nbsp;NumPy.&lt;/p&gt;
&lt;h3&gt;Pandas Data&amp;nbsp;Structures&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Series&lt;/strong&gt;&lt;br&gt;
We now move to the Pandas-specific data types. First up are Series, which are one-dimensional labeled arrays. Unlike ndarrays, these are capable of holding mixed data types. The cells of the series are labeled via the series &lt;strong&gt;Index&lt;/strong&gt;. We will discuss indices more in a bit. The general method of creating a series is as&amp;nbsp;follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;s = Series(data, index=index)  &lt;/span&gt;
&lt;span class="err"&gt;pd.Series([1,2,3,4], index=[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt; a 1&lt;/span&gt;
&lt;span class="err"&gt; b 2&lt;/span&gt;
&lt;span class="err"&gt; c 3&lt;/span&gt;
&lt;span class="err"&gt; d 4&lt;/span&gt;
&lt;span class="err"&gt; dtype: int64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;DataFrame&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As we have seen in other posts on the site, the DataFrame is the main attraction for Pandas. It is a 2-dimensional labeled data structure with columns of potentially different types. You can think of it like a spreadsheet or &lt;span class="caps"&gt;SQL&lt;/span&gt; table, or a dict of Series objects. Like Series, DataFrame accepts many different kinds of input. One way of making a DataFrame is using a dictionary as&amp;nbsp;input.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;one&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.],&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;two&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.],&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;good&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running the code in a notebook will output a nicely formatted&amp;nbsp;table.&lt;/p&gt;
&lt;p&gt;good&lt;/p&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;p&gt;True&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;b&lt;/p&gt;
&lt;p&gt;False&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;c&lt;/p&gt;
&lt;p&gt;False&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;p&gt;True&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;br&gt;&amp;nbsp;Index&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The index in Pandas provides axis labeling information for pandas objects &amp;#8212; it can serve many purposes. First, an index can provide metadata, potentially important for analysis, visualization, and so on. Second, it can enable automatic data alignment when preforming operations on multiple DataFrames or Series. Third, it can allow easy access to subsets of the&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Selection&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A huge improvement over numpy arrays is labeled indexing. We can select subsets by column, row, or both. To select columns use&amp;nbsp;[].&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;df[&amp;#39;good&amp;#39;]  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt; a True&lt;/span&gt;
&lt;span class="err"&gt; b False&lt;/span&gt;
&lt;span class="err"&gt; c False&lt;/span&gt;
&lt;span class="err"&gt; d True&lt;/span&gt;
&lt;span class="err"&gt; Name: good, dtype: bool&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As we can see here, Pandas will reduce dimensions when possible which is why the output above is a Series instead of a DataFrame &amp;#8212; if you wish to force the returned result to be a DataFrame, you must supply a list of arguments, eg &lt;code&gt;df[['good']]&lt;/code&gt;. You can also select individual columns with the dot (.) operator, for example &lt;code&gt;df.good&lt;/code&gt; will give the same result. However, when using this approach, the column name selected must not have any spaces or special characters, nor can it conflict with any DataFrame methods. In order to add a column to a DataFrame, we&amp;nbsp;write,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;df[&amp;#39;A&amp;#39;] = [1, 2, 3]  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also select multiple columns using a column name&amp;nbsp;list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;df[[&amp;#39;good&amp;#39;, &amp;#39;two&amp;#39;]]  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;good&lt;/p&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;p&gt;True&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;b&lt;/p&gt;
&lt;p&gt;False&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;c&lt;/p&gt;
&lt;p&gt;False&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;p&gt;True&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;For row selection, use &lt;code&gt;.loc[row_lables, column_labels]&lt;/code&gt; for label-based indexing and use &lt;code&gt;.iloc[row_positions, column_positions]&lt;/code&gt; for ordinal/positional&amp;nbsp;selection.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;df.loc[[&amp;#39;a&amp;#39;, &amp;#39;d&amp;#39;]]  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;good&lt;/p&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;p&gt;True&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;p&gt;True&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;df.loc[&amp;#39;a&amp;#39;:&amp;#39;b&amp;#39;]  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;good&lt;/p&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;p&gt;True&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;b&lt;/p&gt;
&lt;p&gt;False&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;Notice that the slice is &lt;strong&gt;inclusive&lt;/strong&gt;: It includes both the start and end index &amp;#8212; unlike normal python&amp;nbsp;indexing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;df.iloc[0:2]  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;good&lt;/p&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;p&gt;True&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;b&lt;/p&gt;
&lt;p&gt;False&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;df.loc[&amp;#39;b&amp;#39;, &amp;#39;good&amp;#39;]  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Reading files into&amp;nbsp;Pandas&lt;/h3&gt;
&lt;p&gt;At this point, we require a larger data set in order to demonstrate other Pandas capabilities.  For that purpose, I decided to use unemployment data from (&lt;a href="http://data.bls.gov/"&gt;http://data.bls.gov/&lt;/a&gt;).  The data file is available in our Github repository along with the notebook that generated the examples above. I saved the data as a csv file. To read into the notebook, we&amp;#8217;ll make use of Pandas&amp;#8217; read_csv method &amp;#8212; a fast, simple method for directly reading csv files into a&amp;nbsp;DataFrame.&lt;/p&gt;
&lt;p&gt;After reading in the data, we see that each row corresponds to one unemployment measurement with a different column for each time point. The first column has a numeric id, so the first thing to do is to replace those with human readable strings.  Next, we see that we have incomplete data for Jan 2000, so we drop that column.  Setting the inplace flag to true here causes the modified DataFrame to replace the original &amp;#8212; in this way, we avoid having to copy the&amp;nbsp;original.&lt;/p&gt;
&lt;p&gt;Next, we assign our IDs to the DataFrame index using &lt;code&gt;set_index&lt;/code&gt;, and then drop the column since it is no longer needed.  Lastly we transpose the table so that each row corresponds to a different time point and the columns to the separate&amp;nbsp;measures.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Series ID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Labor force&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Participation rate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;Rate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rate - 16-19 yrs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Rate - 20+ yrs (Men)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;Rate - 20+ yrs (Women)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Rate - White&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;Rate - Black or African American&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Rate - Asian&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;Rate - Hispanic or Latino&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;No High School Diploma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;High School Graduates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Some College or Associate Degree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;Bachelor degree and higher&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Under 5 Weeks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="s1"&gt;&amp;#39;5-14 Weeks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;15 Weeks &amp;amp; over&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;27 Weeks &amp;amp; over&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Jan 2000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Series ID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Series ID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;convert_objects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;convert_numeric&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With these steps, we take the original&amp;nbsp;table:&lt;/p&gt;
&lt;p&gt;Series &lt;span class="caps"&gt;ID&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Jan&amp;nbsp;2000&lt;/p&gt;
&lt;p&gt;Feb&amp;nbsp;2000&lt;/p&gt;
&lt;p&gt;Mar&amp;nbsp;2000&lt;/p&gt;
&lt;p&gt;Apr&amp;nbsp;2000&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;LNS11000000&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;142267(1)&lt;/p&gt;
&lt;p&gt;142456&lt;/p&gt;
&lt;p&gt;142434&lt;/p&gt;
&lt;p&gt;142751&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;LNS11300000&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;67.3&lt;/p&gt;
&lt;p&gt;67.3&lt;/p&gt;
&lt;p&gt;67.3&lt;/p&gt;
&lt;p&gt;67.3&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;LNS14000000&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4.0&lt;/p&gt;
&lt;p&gt;4.1&lt;/p&gt;
&lt;p&gt;4.0&lt;/p&gt;
&lt;p&gt;3.8&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;LNS14000012&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;12.7&lt;/p&gt;
&lt;p&gt;13.8&lt;/p&gt;
&lt;p&gt;13.3&lt;/p&gt;
&lt;p&gt;12.6&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;LNS14000025&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3.3&lt;/p&gt;
&lt;p&gt;3.5&lt;/p&gt;
&lt;p&gt;3.2&lt;/p&gt;
&lt;p&gt;3.1&lt;/p&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;p&gt;Series &lt;span class="caps"&gt;ID&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Labor&amp;nbsp;force&lt;/p&gt;
&lt;p&gt;Participation&amp;nbsp;rate&lt;/p&gt;
&lt;p&gt;Rate&lt;/p&gt;
&lt;p&gt;Rate - 16-19&amp;nbsp;yrs&lt;/p&gt;
&lt;p&gt;Rate - 20+ yrs&amp;nbsp;(Men)&lt;/p&gt;
&lt;p&gt;Feb&amp;nbsp;2000&lt;/p&gt;
&lt;p&gt;142456&lt;/p&gt;
&lt;p&gt;67.3&lt;/p&gt;
&lt;p&gt;4.1&lt;/p&gt;
&lt;p&gt;13.8&lt;/p&gt;
&lt;p&gt;3.5&lt;/p&gt;
&lt;p&gt;Mar&amp;nbsp;2000&lt;/p&gt;
&lt;p&gt;142434&lt;/p&gt;
&lt;p&gt;67.3&lt;/p&gt;
&lt;p&gt;4.0&lt;/p&gt;
&lt;p&gt;13.3&lt;/p&gt;
&lt;p&gt;3.2&lt;/p&gt;
&lt;p&gt;Apr&amp;nbsp;2000&lt;/p&gt;
&lt;p&gt;142751&lt;/p&gt;
&lt;p&gt;67.3&lt;/p&gt;
&lt;p&gt;3.8&lt;/p&gt;
&lt;p&gt;12.6&lt;/p&gt;
&lt;p&gt;3.1&lt;/p&gt;
&lt;p&gt;May&amp;nbsp;2000&lt;/p&gt;
&lt;p&gt;142388&lt;/p&gt;
&lt;p&gt;67.1&lt;/p&gt;
&lt;p&gt;4.0&lt;/p&gt;
&lt;p&gt;12.8&lt;/p&gt;
&lt;p&gt;3.3&lt;/p&gt;
&lt;p&gt;Jun&amp;nbsp;2000&lt;/p&gt;
&lt;p&gt;142591&lt;/p&gt;
&lt;p&gt;67.1&lt;/p&gt;
&lt;p&gt;4.0&lt;/p&gt;
&lt;p&gt;12.3&lt;/p&gt;
&lt;p&gt;3.2&lt;/p&gt;
&lt;h3&gt;Working with the&amp;nbsp;data&lt;/h3&gt;
&lt;p&gt;Now that we have the data in a nicely formatted within DataFrame, we can easily visualize it using the Pandas plot method. For example, to plot the general unemployment rate, we&amp;nbsp;write&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;df[&amp;#39;Rate&amp;#39;].plot()  &lt;/span&gt;
&lt;span class="err"&gt;plt.ylabel(&amp;#39;Unemployment Rate (%)&amp;#39;)  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://efavdb.github.io/wp-content/uploads/2015/07/fig1.png"&gt;&lt;img alt="fig1" src="https://efavdb.github.io/wp-content/uploads/2015/07/fig1.png"&gt;&lt;/a&gt; Similarly, the following plots unemployment for each of the available different levels of&amp;nbsp;education.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;df[[&amp;#39;Rate&amp;#39;, &amp;#39;No High School Diploma&amp;#39;, &amp;#39;Bachelor degree and higher&amp;#39;]].plot()  &lt;/span&gt;
&lt;span class="err"&gt;plt.ylabel(&amp;#39;Unemployment Rate (%)&amp;#39;)  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://efavdb.github.io/wp-content/uploads/2015/07/fig2.png"&gt;&lt;img alt="fig2" src="https://efavdb.github.io/wp-content/uploads/2015/07/fig2.png"&gt;&lt;/a&gt;&lt;br&gt;
Interestingly, these unemployment rates seem to evolve in a similar manner. Notice that both the green and the red curves seem to have doubled during the recent&amp;nbsp;slow-down.&lt;/p&gt;
&lt;h3&gt;GroupBy&lt;/h3&gt;
&lt;p&gt;You can also used Pandas GroupBy functionality to do analysis on subsets of the data.  For this example we &lt;a href="http://pandas.pydata.org/pandas-docs/stable/groupby.html"&gt;GroupBy&lt;/a&gt; year, and then make a plot showing the mean unemployment per year. GroupBy allows one to easily split the data, apply a function to each group, and then combine the results. It is a very useful&amp;nbsp;feature!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;df[&amp;#39;Year&amp;#39;]=(df.index.to_datetime()).year  &lt;/span&gt;
&lt;span class="err"&gt;years = df.groupby(&amp;#39;Year&amp;#39;)  &lt;/span&gt;
&lt;span class="err"&gt;years[&amp;#39;Rate&amp;#39;].mean().plot(kind=&amp;#39;bar&amp;#39;)  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="https://efavdb.github.io/wp-content/uploads/2015/07/fig3.png"&gt;&lt;img alt="fig3" src="https://efavdb.github.io/wp-content/uploads/2015/07/fig3.png"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are some functions like mean, and describe that can be run directly on a grouped&amp;nbsp;object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;years.get_group(2005)[&amp;#39;Rate&amp;#39;].describe()  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt; count 12.000000&lt;/span&gt;
&lt;span class="err"&gt; mean 5.083333&lt;/span&gt;
&lt;span class="err"&gt; std 0.158592&lt;/span&gt;
&lt;span class="err"&gt; min 4.900000&lt;/span&gt;
&lt;span class="err"&gt; 25% 5.000000&lt;/span&gt;
&lt;span class="err"&gt; 50% 5.000000&lt;/span&gt;
&lt;span class="err"&gt; 75% 5.200000&lt;/span&gt;
&lt;span class="err"&gt; max 5.400000&lt;/span&gt;
&lt;span class="err"&gt; Name: Rate, dtype: float64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is possible to apply any function to the grouped function using &lt;a href="http://pandas.pydata.org/pandas-docs/stable/groupby.html#aggregation"&gt;agg()&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;years[&amp;#39;Rate&amp;#39;].agg([np.mean, np.std, max, min])  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;mean&lt;/p&gt;
&lt;p&gt;std&lt;/p&gt;
&lt;p&gt;max&lt;/p&gt;
&lt;p&gt;min&lt;/p&gt;
&lt;p&gt;Year&lt;/p&gt;
&lt;p&gt;2000&lt;/p&gt;
&lt;p&gt;3.963636&lt;/p&gt;
&lt;p&gt;0.092442&lt;/p&gt;
&lt;p&gt;4.1&lt;/p&gt;
&lt;p&gt;3.8&lt;/p&gt;
&lt;p&gt;2001&lt;/p&gt;
&lt;p&gt;4.741667&lt;/p&gt;
&lt;p&gt;0.528219&lt;/p&gt;
&lt;p&gt;5.7&lt;/p&gt;
&lt;p&gt;4.2&lt;/p&gt;
&lt;p&gt;2002&lt;/p&gt;
&lt;p&gt;5.783333&lt;/p&gt;
&lt;p&gt;0.102986&lt;/p&gt;
&lt;p&gt;6.0&lt;/p&gt;
&lt;p&gt;5.7&lt;/p&gt;
&lt;p&gt;2003&lt;/p&gt;
&lt;p&gt;5.991667&lt;/p&gt;
&lt;p&gt;0.178164&lt;/p&gt;
&lt;p&gt;6.3&lt;/p&gt;
&lt;p&gt;5.7&lt;/p&gt;
&lt;p&gt;2004&lt;/p&gt;
&lt;p&gt;5.541667&lt;/p&gt;
&lt;p&gt;0.131137&lt;/p&gt;
&lt;p&gt;5.8&lt;/p&gt;
&lt;p&gt;5.4&lt;/p&gt;
&lt;p&gt;2005&lt;/p&gt;
&lt;p&gt;5.083333&lt;/p&gt;
&lt;p&gt;0.158592&lt;/p&gt;
&lt;p&gt;5.4&lt;/p&gt;
&lt;p&gt;4.9&lt;/p&gt;
&lt;p&gt;2006&lt;/p&gt;
&lt;p&gt;4.608333&lt;/p&gt;
&lt;p&gt;0.131137&lt;/p&gt;
&lt;p&gt;4.8&lt;/p&gt;
&lt;p&gt;4.4&lt;/p&gt;
&lt;p&gt;2007&lt;/p&gt;
&lt;p&gt;4.616667&lt;/p&gt;
&lt;p&gt;0.164225&lt;/p&gt;
&lt;p&gt;5.0&lt;/p&gt;
&lt;p&gt;4.4&lt;/p&gt;
&lt;p&gt;2008&lt;/p&gt;
&lt;p&gt;5.800000&lt;/p&gt;
&lt;p&gt;0.780443&lt;/p&gt;
&lt;p&gt;7.3&lt;/p&gt;
&lt;p&gt;4.9&lt;/p&gt;
&lt;p&gt;2009&lt;/p&gt;
&lt;p&gt;9.283333&lt;/p&gt;
&lt;p&gt;0.696528&lt;/p&gt;
&lt;p&gt;10.0&lt;/p&gt;
&lt;p&gt;7.8&lt;/p&gt;
&lt;p&gt;2010&lt;/p&gt;
&lt;p&gt;9.608333&lt;/p&gt;
&lt;p&gt;0.219331&lt;/p&gt;
&lt;p&gt;9.9&lt;/p&gt;
&lt;p&gt;9.3&lt;/p&gt;
&lt;p&gt;2011&lt;/p&gt;
&lt;p&gt;8.941667&lt;/p&gt;
&lt;p&gt;0.206522&lt;/p&gt;
&lt;p&gt;9.2&lt;/p&gt;
&lt;p&gt;8.5&lt;/p&gt;
&lt;p&gt;2012&lt;/p&gt;
&lt;p&gt;8.066667&lt;/p&gt;
&lt;p&gt;0.214617&lt;/p&gt;
&lt;p&gt;8.3&lt;/p&gt;
&lt;p&gt;7.7&lt;/p&gt;
&lt;p&gt;2013&lt;/p&gt;
&lt;p&gt;7.366667&lt;/p&gt;
&lt;p&gt;0.342008&lt;/p&gt;
&lt;p&gt;8.0&lt;/p&gt;
&lt;p&gt;6.7&lt;/p&gt;
&lt;p&gt;2014&lt;/p&gt;
&lt;p&gt;6.150000&lt;/p&gt;
&lt;p&gt;0.360555&lt;/p&gt;
&lt;p&gt;6.7&lt;/p&gt;
&lt;p&gt;5.6&lt;/p&gt;
&lt;p&gt;2015&lt;/p&gt;
&lt;p&gt;5.412500&lt;/p&gt;
&lt;p&gt;0.180772&lt;/p&gt;
&lt;p&gt;5.7&lt;/p&gt;
&lt;p&gt;5.1&lt;/p&gt;
&lt;h3&gt;Boolean&amp;nbsp;Indexing&lt;/h3&gt;
&lt;p&gt;Another common operation is the use of boolean vectors to filter data. This allows one to easily select subsets of data. It also provides a quick method for counting &amp;#8212; this works because True and False are represented as 1 and 0, respectively, when&amp;nbsp;adding.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sum(df[&amp;#39;Rate&amp;#39;] &amp;gt; 7)  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; 59&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;String&amp;nbsp;Methods&lt;/h3&gt;
&lt;p&gt;Pandas has very useful string methods which can be access via &lt;code&gt;str.&lt;/code&gt; This makes it easy to look for patterns in the text, do filtering, replacements, and so on. I have a couple of examples below but I highly recommend taking a look at the documentation page for many &lt;a href="http://pandas.pydata.org/pandas-docs/stable/text.html"&gt;examples&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;s = pd.Series([&amp;#39;Dog&amp;#39;, &amp;#39;Bat&amp;#39;, &amp;#39;Coon&amp;#39;, &amp;#39;cAke&amp;#39;, &amp;#39;bAnk&amp;#39;, &amp;#39;CABA&amp;#39;, &amp;#39;dog&amp;#39;, &amp;#39;cat&amp;#39;])  &lt;/span&gt;
&lt;span class="err"&gt;s[s.str.contains(&amp;#39;B&amp;#39;)]  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;1 Bat&lt;/span&gt;
&lt;span class="err"&gt;5 CABA&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;s.str.replace(&amp;#39;dog|cat&amp;#39;, &amp;#39;nope &amp;#39;, case=False)  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;0 nope&lt;/span&gt;
&lt;span class="err"&gt;1 Bat&lt;/span&gt;
&lt;span class="err"&gt;2 Coon&lt;/span&gt;
&lt;span class="err"&gt;3 cAke&lt;/span&gt;
&lt;span class="err"&gt;4 bAnk&lt;/span&gt;
&lt;span class="err"&gt;5 CABA&lt;/span&gt;
&lt;span class="err"&gt;6 nope&lt;/span&gt;
&lt;span class="err"&gt;7 nope&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;Wrap&amp;nbsp;Up&lt;/h3&gt;
&lt;p&gt;Pandas is a very useful library that I highly recommend. Although it can have a bit of a steep learning curve, it&amp;#8217;s actually pretty easy to pick up once you get started. Give it a shot, and you won&amp;#8217;t regret&amp;nbsp;it!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/EFavDB/Pandas" title="GitHub Repo"&gt;&lt;img alt="Open GitHub Repo" src="http://efavdb.com/wp-content/uploads/2015/03/GitHub_Logo.png"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Programming"></category><category term="methods"></category><category term="programming"></category><category term="tools"></category></entry><entry><title>Build a web scraper for a literature search - from soup to nuts</title><link href="https://efavdb.github.io/build-a-web-scraper-lit-search" rel="alternate"></link><published>2015-08-25T17:43:00-07:00</published><updated>2015-08-25T17:43:00-07:00</updated><author><name>Cathy Yeh</name></author><id>tag:efavdb.github.io,2015-08-25:/build-a-web-scraper-lit-search</id><summary type="html">&lt;p&gt;&lt;em&gt;Code, references, and examples of this project are on &lt;a href="https://github.com/EFavDB/PubmedCentral_Scraper"&gt;Github&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this post, I&amp;#8217;ll describe the soup to nuts process of automating a literature search in &lt;a href="http://www.ncbi.nlm.nih.gov/pmc/"&gt;Pubmed Central&lt;/a&gt; using&amp;nbsp;R.&lt;/p&gt;
&lt;p&gt;It feels deeply satisfying to sit back and let the code do the dirty&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;Is it as satisfying …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Code, references, and examples of this project are on &lt;a href="https://github.com/EFavDB/PubmedCentral_Scraper"&gt;Github&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this post, I&amp;#8217;ll describe the soup to nuts process of automating a literature search in &lt;a href="http://www.ncbi.nlm.nih.gov/pmc/"&gt;Pubmed Central&lt;/a&gt; using&amp;nbsp;R.&lt;/p&gt;
&lt;p&gt;It feels deeply satisfying to sit back and let the code do the dirty&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;Is it as satisfying as a bowl of red-braised beef noodle soup with melt-in-your-mouth tendons from Taipei&amp;#8217;s Yong Kang Restaurant (featured&amp;nbsp;image)?&lt;/p&gt;
&lt;p&gt;If you have to do a lit search like this more than once, then I have to say the answer is yes &amp;#8212; unequivocally,&amp;nbsp;yes.  &lt;/p&gt;
&lt;p&gt;The three components of the project&amp;nbsp;are&lt;/p&gt;
&lt;p&gt;&lt;a href="#Section1"&gt;I. Design a database to store the contents of a scraping session&lt;/a&gt;&lt;br&gt;
&lt;a href="#Section2"&gt;&lt;span class="caps"&gt;II&lt;/span&gt;. Extract information via an &lt;span class="caps"&gt;API&lt;/span&gt; and web scraper&lt;/a&gt;&lt;br&gt;
&lt;a href="#Section3"&gt;&lt;span class="caps"&gt;III&lt;/span&gt;. Generate summary&amp;nbsp;reports&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to skip the explanations and go straight to using the program, check out the quick-start &lt;span class="caps"&gt;HTML5&lt;/span&gt; &lt;a href="https://efavdb.github.io/wp-content/uploads/2015/08/PubmedCentralSlides.html"&gt;presentation&lt;/a&gt; or &lt;a href="https://efavdb.github.io/wp-content/uploads/2015/08/scraper_manual.html"&gt;manual&lt;/a&gt; and an example of a &lt;a href="https://github.com/EFavDB/PubmedCentral_Scraper/blob/master/example/scraper_TGI_plots_for_trastuzumab.md"&gt;report&lt;/a&gt; generated by this&amp;nbsp;project.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The task is to capture plots of tumor growth inhibition (&lt;span class="caps"&gt;TGI&lt;/span&gt;), i.e. tumor growth as a function of time, in animals treated with a particular cancer drug, then aggregate all the plots in a summary&amp;nbsp;report.&lt;/p&gt;
&lt;p&gt;An example of a &lt;span class="caps"&gt;TGI&lt;/span&gt; plot is provided below (source: &lt;a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3792566/" title="PMC3792566"&gt;Qi 2011&lt;/a&gt;) for &lt;span class="caps"&gt;TGI&lt;/span&gt; in mice treated with the cancer drug,&amp;nbsp;Docetaxel.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;#8221;attachment_2047&amp;#8221; align=&amp;#8221;alignnone&amp;#8221; width=&amp;#8221;300&amp;#8221; class=&amp;#8221;left&amp;#8221;]&lt;a href="http://efavdb.com/wp-content/uploads/2015/07/TGIplot.png"&gt;&lt;img alt="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3792566/figure/F5/" src="http://efavdb.com/wp-content/uploads/2015/07/TGIplot-300x217.png"&gt;&lt;/a&gt; &lt;span class="caps"&gt;TGI&lt;/span&gt; plots for several drugs (image credit: Qi&amp;nbsp;2011)[/caption]&lt;/p&gt;
&lt;p&gt;Since the scraper was intended for a casual (non-exhaustive) literature search, I decided to confine the search to online articles in Pubmed Central (as opposed to Pubmed in general) since they are entirely open-access and available in a mostly uniform&amp;nbsp;format.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;I. Set up the the&amp;nbsp;database&lt;/h2&gt;
&lt;p&gt;This project called for data storage beyond the scope of data frames and external flat files, e.g. Excel spreadsheets or csv files, since the following attributes were required of the&amp;nbsp;data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Persistence outside the R environment =&amp;gt; data frames&amp;nbsp;unsuitable&lt;/li&gt;
&lt;li&gt;Ease of access and manipulation =&amp;gt; writing to and reading from text/csv files would be&amp;nbsp;cumbersome&lt;/li&gt;
&lt;li&gt;The data would be structured =&amp;gt; relational&amp;nbsp;database&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With a view towards expediency, we cover just enough to get things up and running and leave the finer details of relational database design to the&amp;nbsp;experts.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.sqlite.org/about.html" title="SQLite"&gt;SQLite&lt;/a&gt; is well-suited for this small project; it&amp;#8217;s self-contained and doesn&amp;#8217;t require fussing with servers. To lower the barrier even further, the &lt;a href="http://cran.r-project.org/web/packages/RSQLite/index.html" title="RSQLite"&gt;RSQLite&lt;/a&gt; package embeds SQLite in R (no separate installation needed) and allows you to very easily interface with your database within the R environment. The database itself is stored in a single file on your hard disk and easily&amp;nbsp;transferred.&lt;/p&gt;
&lt;h3&gt;What data will be&amp;nbsp;collected?&lt;/h3&gt;
&lt;p&gt;The first step is to decide what data should be collected during the web scraping process. We want to aggregate images of plots in a (html)&amp;nbsp;report.&lt;/p&gt;
&lt;p&gt;However, downloading the images themselves is inefficient; instead, we&amp;#8217;ll just grab the image URLs on Pubmed Central. (The image URLs are useful because they can be referred to by markdown code to embed the images in the html&amp;nbsp;report.)&lt;/p&gt;
&lt;p&gt;The image urls should be captured, along with associated information&amp;nbsp;below:&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;image data&lt;/strong&gt;                         image url, figure name in the article, image caption
  &lt;strong&gt;article metadata&lt;/strong&gt;                   Pubmed Central id, &lt;span class="caps"&gt;DOI&lt;/span&gt;, title, journal, year of publication, authors, abstracts, keywords
  &lt;strong&gt;search criteria met by the image&lt;/strong&gt;   topic/drug, type of&amp;nbsp;plot&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The last point addresses the foreseeable need to be able to modify the search parameters. In the next section, we allow for the possibility that the same image might show up for more than one kind of drug or plot&amp;nbsp;type.&lt;/p&gt;
&lt;h3&gt;Decide on a layout for the&amp;nbsp;database&lt;/h3&gt;
&lt;p&gt;After pinning down the content itself, the next step is to decide how it should be arranged in the database.&amp;nbsp;Namely,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What tables are&amp;nbsp;needed?&lt;/li&gt;
&lt;li&gt;Which fields go in which&amp;nbsp;tables?&lt;/li&gt;
&lt;li&gt;How do the tables relate to one&amp;nbsp;another?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This particularly helpful &lt;a href="http://db.grussell.org/section008.html" title="normalization"&gt;page&lt;/a&gt; walks you through the concept of database normalization by providing lots of concrete examples, including &amp;#8220;anomalies&amp;#8221; that arise in poorly designed&amp;nbsp;databases.&lt;/p&gt;
&lt;p&gt;Some ideas on normalization are intuitive. Let&amp;#8217;s take a look at how to restructure a table to satisfy first normal form (&lt;span class="caps"&gt;1NF&lt;/span&gt;). The table below is not in &lt;span class="caps"&gt;1NF&lt;/span&gt; because it contains sets of values within single&amp;nbsp;rows.&lt;/p&gt;
&lt;p&gt;student_id&lt;/p&gt;
&lt;p&gt;name&lt;/p&gt;
&lt;p&gt;subjects&lt;/p&gt;
&lt;p&gt;grades&lt;/p&gt;
&lt;p&gt;1234&lt;/p&gt;
&lt;p&gt;Andrew&lt;/p&gt;
&lt;p&gt;machine&amp;nbsp;learning&lt;/p&gt;
&lt;p&gt;linear&amp;nbsp;algebra&lt;/p&gt;
&lt;p&gt;modern&amp;nbsp;physics&lt;/p&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;p&gt;B+&lt;/p&gt;
&lt;p&gt;5678&lt;/p&gt;
&lt;p&gt;Yaser&lt;/p&gt;
&lt;p&gt;statistical&amp;nbsp;physics&lt;/p&gt;
&lt;p&gt;algorithms&lt;/p&gt;
&lt;p&gt;A-&lt;/p&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;p&gt;Instead, we can break it up into two&amp;nbsp;tables:&lt;/p&gt;
&lt;p&gt;table:&amp;nbsp;student&lt;/p&gt;
&lt;p&gt;student_id&lt;/p&gt;
&lt;p&gt;name&lt;/p&gt;
&lt;p&gt;1234&lt;/p&gt;
&lt;p&gt;Andrew&lt;/p&gt;
&lt;p&gt;5678&lt;/p&gt;
&lt;p&gt;Yaser&lt;/p&gt;
&lt;p&gt;table:&amp;nbsp;grades&lt;/p&gt;
&lt;p&gt;student_id&lt;/p&gt;
&lt;p&gt;subject&lt;/p&gt;
&lt;p&gt;grade&lt;/p&gt;
&lt;p&gt;1234&lt;/p&gt;
&lt;p&gt;machine&amp;nbsp;learning&lt;/p&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;p&gt;1234&lt;/p&gt;
&lt;p&gt;linear&amp;nbsp;algebra&lt;/p&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;p&gt;1234&lt;/p&gt;
&lt;p&gt;modern&amp;nbsp;physics&lt;/p&gt;
&lt;p&gt;B+&lt;/p&gt;
&lt;p&gt;5678&lt;/p&gt;
&lt;p&gt;statistical&amp;nbsp;physics&lt;/p&gt;
&lt;p&gt;A-&lt;/p&gt;
&lt;p&gt;5678&lt;/p&gt;
&lt;p&gt;algorithms&lt;/p&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;p&gt;Column names that are primary keys are underlined. A primary key is a column, or combination of columns, whose values uniquely identify a row in a table (and accordingly guards against duplicate rows). In a first go at a schema, a table without a logical primary key reared its ugly&amp;nbsp;head:&lt;/p&gt;
&lt;p&gt;pmcid&lt;/p&gt;
&lt;p&gt;topic&lt;/p&gt;
&lt;p&gt;123456&lt;/p&gt;
&lt;p&gt;drug&amp;nbsp;A&lt;/p&gt;
&lt;p&gt;123456&lt;/p&gt;
&lt;p&gt;drug&amp;nbsp;B&lt;/p&gt;
&lt;p&gt;100000&lt;/p&gt;
&lt;p&gt;drug&amp;nbsp;A&lt;/p&gt;
&lt;p&gt;Note that the &lt;strong&gt;pmcid&lt;/strong&gt; value is not guaranteed to be unique in the above table because the same article may show up in searches for multiple drugs. This situation hinted at the need to restructure the tables. We finally settled on the three tables below, which all had natural primary keys&amp;nbsp;(underlined):&lt;/p&gt;
&lt;p&gt;table:&amp;nbsp;article&lt;/p&gt;
&lt;p&gt;pmcid&lt;/p&gt;
&lt;p&gt;doi&lt;/p&gt;
&lt;p&gt;title&lt;/p&gt;
&lt;p&gt;journal&lt;/p&gt;
&lt;p&gt;year&lt;/p&gt;
&lt;p&gt;authors&lt;/p&gt;
&lt;p&gt;abstract&lt;/p&gt;
&lt;p&gt;keywords&lt;/p&gt;
&lt;p&gt;table:&amp;nbsp;figure&lt;/p&gt;
&lt;p&gt;topic&lt;/p&gt;
&lt;p&gt;plot_type&lt;/p&gt;
&lt;p&gt;img_url&lt;/p&gt;
&lt;p&gt;pmcid&lt;/p&gt;
&lt;p&gt;table:&amp;nbsp;figure_text&lt;/p&gt;
&lt;p&gt;img_url&lt;/p&gt;
&lt;p&gt;fig_name&lt;/p&gt;
&lt;p&gt;caption&lt;/p&gt;
&lt;p&gt;[caption id=&amp;#8221;attachment_2041&amp;#8221; align=&amp;#8221;alignright&amp;#8221; width=&amp;#8221;263&amp;#8221;]&lt;a href="http://efavdb.com/wp-content/uploads/2015/07/a_hanging.jpg"&gt;&lt;img alt="cartoon hanging" src="http://efavdb.com/wp-content/uploads/2015/07/a_hanging-263x300.jpg"&gt;&lt;/a&gt; Their tables were not in &lt;span class="caps"&gt;1NF&lt;/span&gt;.[/caption]&lt;/p&gt;
&lt;p&gt;The tables &amp;#8220;figure&amp;#8221; and &amp;#8220;figure_text&amp;#8221; are kept separate in order to minimize redundancies. For instance, the same img_url can appear in the table &amp;#8220;figure&amp;#8221; multiple times if it matches a number of different drugs or plot types, but its caption would only need to be stored once in the table&amp;nbsp;&amp;#8220;figure_text&amp;#8221;.&lt;/p&gt;
&lt;p&gt;The table &amp;#8220;figure&amp;#8221; is not in second normal form (&lt;span class="caps"&gt;2NF&lt;/span&gt;) because of a partial key dependency; the pmcid field only depends on img_url, rather than the entire composite key {topic, plot_type, and&amp;nbsp;img_url}.&lt;/p&gt;
&lt;p&gt;Although the normalization rules sound a bit intimidating, they are just guidelines&amp;#8212;apparently, one can even get carried away with&amp;nbsp;over-normalizing.&lt;/p&gt;
&lt;p&gt;The database has held up fine so far, but any suggestions on how to improve the design are very&amp;nbsp;welcome!&lt;/p&gt;
&lt;h3&gt;Creating a SQLite database in&amp;nbsp;R&lt;/h3&gt;
&lt;p&gt;With a schema in hand, creating the SQLite database in R is a matter of minutes. First, we load the packages for interfacing with the&amp;nbsp;database.&lt;/p&gt;
&lt;p&gt;[code lang=&amp;#8221;r&amp;#8221;]&lt;br&gt;
library(&lt;span class="caps"&gt;DBI&lt;/span&gt;)&lt;br&gt;&amp;nbsp;library(RSQLite)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;Then&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;connection&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;database&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ll&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;myDb.sqlite&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;con&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SQLite&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;dbname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;myDb.sqlite&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, we create the three tables &amp;#8220;article&amp;#8221;, &amp;#8220;figure&amp;#8221;, and&amp;nbsp;&amp;#8220;figure_text&amp;#8221;.&lt;/p&gt;
&lt;p&gt;[code&amp;nbsp;language=&amp;#8221;r&amp;#8221;]  &lt;/p&gt;
&lt;h2&gt;create &lt;span class="caps"&gt;TABLE&lt;/span&gt;&amp;nbsp;figure_text&lt;/h2&gt;
&lt;p&gt;query = &amp;#8216;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt; figure_text(img_url &lt;span class="caps"&gt;TEXT&lt;/span&gt;, fig_name &lt;span class="caps"&gt;TEXT&lt;/span&gt;, caption &lt;span class="caps"&gt;TEXT&lt;/span&gt;, &lt;span class="caps"&gt;PRIMARY&lt;/span&gt; &lt;span class="caps"&gt;KEY&lt;/span&gt;(img_url))&amp;#8217;&lt;br&gt;
dbGetQuery(con,&amp;nbsp;query)&lt;/p&gt;
&lt;h2&gt;create &lt;span class="caps"&gt;TABLE&lt;/span&gt;&amp;nbsp;figure&lt;/h2&gt;
&lt;p&gt;query = &amp;#8216;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt; figure(topic &lt;span class="caps"&gt;TEXT&lt;/span&gt;, plot_type &lt;span class="caps"&gt;TEXT&lt;/span&gt;, img_url &lt;span class="caps"&gt;TEXT&lt;/span&gt;, pmcid &lt;span class="caps"&gt;INTEGER&lt;/span&gt;, &lt;span class="caps"&gt;PRIMARY&lt;/span&gt; &lt;span class="caps"&gt;KEY&lt;/span&gt;(topic, plot_type, img_url))&amp;#8217;&lt;br&gt;
dbGetQuery(con,&amp;nbsp;query)&lt;/p&gt;
&lt;h2&gt;create &lt;span class="caps"&gt;TABLE&lt;/span&gt;&amp;nbsp;article&lt;/h2&gt;
&lt;p&gt;query = &amp;#8216;&lt;span class="caps"&gt;CREATE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt; article(pmcid &lt;span class="caps"&gt;INTEGER&lt;/span&gt;, doi &lt;span class="caps"&gt;TEXT&lt;/span&gt;, title &lt;span class="caps"&gt;TEXT&lt;/span&gt;, journal &lt;span class="caps"&gt;TEXT&lt;/span&gt;, year &lt;span class="caps"&gt;INTEGER&lt;/span&gt;, authors &lt;span class="caps"&gt;TEXT&lt;/span&gt;, abstract &lt;span class="caps"&gt;TEXT&lt;/span&gt;, keywords &lt;span class="caps"&gt;TEXT&lt;/span&gt;, &lt;span class="caps"&gt;PRIMARY&lt;/span&gt; &lt;span class="caps"&gt;KEY&lt;/span&gt;(pmcid))&amp;#8217;&lt;br&gt;
dbGetQuery(con,&amp;nbsp;query)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;Last&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="k"&gt;close&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;connection&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;dbDisconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The SQLite database is now ready to be used! The script above is available on github as &lt;code&gt;createSQLiteDatabase.R&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;span class="caps"&gt;II&lt;/span&gt;. Scrape Pubmed Central&amp;nbsp;articles&lt;/h2&gt;
&lt;p&gt;The script &lt;code&gt;pubmedcentral_scraper.R&lt;/code&gt; is where the action happens. It takes input from the user to query the Pubmed Central Database, scrape articles, and load the extracted information into the&amp;nbsp;database.&lt;/p&gt;
&lt;h3&gt;Input keywords for literature search and labels in&amp;nbsp;database&lt;/h3&gt;
&lt;p&gt;The user input section is shown&amp;nbsp;below.&lt;/p&gt;
&lt;p&gt;[code&amp;nbsp;language=&amp;#8221;r&amp;#8221;]  &lt;/p&gt;
&lt;h2&gt;&amp;lt;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;-&lt;span class="caps"&gt;USER&lt;/span&gt; &lt;span class="caps"&gt;INPUT&lt;/span&gt; &lt;span class="caps"&gt;STARTS&lt;/span&gt; &lt;span class="caps"&gt;HERE&lt;/span&gt;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;-&amp;gt;&lt;/h2&gt;
&lt;h2&gt;name of database where scraper results are&amp;nbsp;stored&lt;/h2&gt;
&lt;p&gt;database.name =&amp;nbsp;&amp;#8220;myDb.sqlite&amp;#8221;&lt;/p&gt;
&lt;h2&gt;maximum number of results to retrieve from&amp;nbsp;query&lt;/h2&gt;
&lt;p&gt;retmax =&amp;nbsp;10&lt;/p&gt;
&lt;h2&gt;topic terms to be queried via the pubmed search&amp;nbsp;engine&lt;/h2&gt;
&lt;p&gt;query.topic = c(&amp;#8220;Docetaxel&amp;#8221;,&amp;nbsp;&amp;#8220;Docetaxol&amp;#8221;)&lt;/p&gt;
&lt;h2&gt;keywords to identify plot type to be&amp;nbsp;captured&lt;/h2&gt;
&lt;h2&gt;terms should be&amp;nbsp;lower-case&lt;/h2&gt;
&lt;p&gt;query.plottype = c(&amp;#8220;tumor growth&amp;#8221;, &amp;#8220;tumor volume&amp;#8221;,&lt;br&gt;
&amp;#8220;tumor size&amp;#8221;, &amp;#8220;tumor inhibition&amp;#8221;,&lt;br&gt;
&amp;#8220;tumor growth inhibition&amp;#8221;, &amp;#8220;tgi&amp;#8221;,&lt;br&gt;
&amp;#8220;tumor response&amp;#8221;, &amp;#8220;tumor&amp;nbsp;regression&amp;#8221;)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="k"&gt;user&lt;/span&gt; &lt;span class="k"&gt;input&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plottype&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;construct&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Pubmed&lt;/span&gt; &lt;span class="n"&gt;Central&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Entrez&lt;/span&gt; &lt;span class="n"&gt;Programming&lt;/span&gt; &lt;span class="n"&gt;Utilities&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;details&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;utilities&lt;/span&gt; &lt;span class="n"&gt;guide&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ncbi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nlm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nih&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gov&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;NBK25499&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;made&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;National&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Biotechnology&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ncbi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nlm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nih&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gov&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NCBI&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt; &lt;span class="k"&gt;To&lt;/span&gt; &lt;span class="n"&gt;maximize&lt;/span&gt; &lt;span class="n"&gt;hits&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;user&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;supply&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="n"&gt;terms&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;each&lt;/span&gt; &lt;span class="k"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="k"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;drug&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;database&lt;/span&gt;  
&lt;span class="n"&gt;topic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Docetaxel&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;database&lt;/span&gt;  
&lt;span class="n"&gt;plot_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;TGI&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c1"&gt;---------USER INPUT ENDS HERE-----------&amp;gt;  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The variables &lt;code&gt;topic&lt;/code&gt; and &lt;code&gt;plot_type&lt;/code&gt; label the data in the SQLite database (the labels should be consistent between queries in order to simplify the information retrieval process, e.g. stick to one spelling convention for a particular drug, like &amp;#8220;Docetaxel&amp;#8221;, in&amp;nbsp;myDb.sqlite).&lt;/p&gt;
&lt;p&gt;The first E-utility we will use is ESearch, which returns the &lt;span class="caps"&gt;PMC&lt;/span&gt; ids of articles matching a query, along with other metadata. The E-utilities &lt;span class="caps"&gt;API&lt;/span&gt; is extremely easy to use. Simply string together the set of parameters (&lt;span class="caps"&gt;NCBI&lt;/span&gt; database name, utility name, etc.) and go to the &lt;span class="caps"&gt;URL&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;[code&amp;nbsp;language=&amp;#8221;r&amp;#8221;]  &lt;/p&gt;
&lt;h2&gt;compose url for&amp;nbsp;eSearch&lt;/h2&gt;
&lt;p&gt;url.esearch = paste0(url.base, esearch, db, &amp;#8220;&amp;amp;&amp;#8221;, retmax,&amp;#8221;&amp;amp;&amp;#8221;, sortmethod, &amp;#8220;&amp;amp;&amp;#8221;,&amp;nbsp;query)&lt;/p&gt;
&lt;h2&gt;get and parse xml data returned by&amp;nbsp;eSearch&lt;/h2&gt;
&lt;p&gt;data.esearch =&amp;nbsp;getURL(url.esearch)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;explicit&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="n"&gt;constructed&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;above&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="k"&gt;user&lt;/span&gt; &lt;span class="k"&gt;input&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;eutils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ncbi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nlm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nih&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gov&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;entrez&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;eutils&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;esearch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fcgi&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pmc&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;retmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;relevance&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Docetaxel\&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;OR&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Docetaxol\&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;tumor+growth\&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;OR&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;tumor+volume\&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;OR&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;tumor+size\&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;OR&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;tumor+inhibition\&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;OR&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;tumor+growth+inhibition\&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;OR&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;tgi\&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;OR&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;tumor+response\&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;OR&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;tumor+regression\&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;Try&lt;/span&gt; &lt;span class="n"&gt;copying&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;pasting&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;above&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;returned&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Here&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s an excerpt of the XML document from a query to ESearch on August 25, 2015:&lt;/span&gt;

&lt;span class="s1"&gt;[caption id=&amp;quot;attachment_2317&amp;quot; align=&amp;quot;alignnone&amp;quot; width=&amp;quot;164&amp;quot; class=&amp;quot;center&amp;quot;][![ESearch XML file](http://efavdb.com/wp-content/uploads/2015/08/esearchXML-164x300.jpg)]({static}/wp-content/uploads/2015/08/esearchXML.jpg) XML output from a query to PMC via the ESearch API.[/caption]&lt;/span&gt;

&lt;span class="s1"&gt;We extract the PMC ids, which are sandwiched between the &amp;lt;Id&amp;gt; XML tags, using functions from the XML and rvest packages:&lt;/span&gt;

&lt;span class="s1"&gt;[code language=&amp;quot;r&amp;quot;]  &lt;/span&gt;
&lt;span class="s1"&gt;data.xml = xmlParse(data.esearch)  &lt;/span&gt;
&lt;span class="s1"&gt;## get pmcid&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;  
&lt;span class="n"&gt;pmcids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="n"&gt;xml_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="n"&gt;xml_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;%&amp;gt;%&lt;/code&gt; is a pipe operator for chaining commands (from the &lt;a href="https://cran.r-project.org/web/packages/magrittr/index.html"&gt;magrittr&lt;/a&gt;&amp;nbsp;package).&lt;/p&gt;
&lt;p&gt;The URLs of the html article can be simply constructed from their &lt;span class="caps"&gt;PMC&lt;/span&gt; ids. For example, the html version of the article with &lt;span class="caps"&gt;PMC&lt;/span&gt; id 3792566 is found at:&amp;nbsp;http://www.ncbi.nlm.nih.gov/pmc/articles/3792566&lt;/p&gt;
&lt;h3&gt;Scrape &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;articles&lt;/h3&gt;
&lt;p&gt;The scraping of the &lt;span class="caps"&gt;HTML&lt;/span&gt; article is performed by &lt;code&gt;scrapeArticle.R&lt;/code&gt;. Note, &lt;span class="caps"&gt;PMC&lt;/span&gt; ids returned by ESearch which have already been scraped for that particular combination of search terms are&amp;nbsp;skipped.&lt;/p&gt;
&lt;p&gt;The html version of the &lt;span class="caps"&gt;PMC&lt;/span&gt; articles only show excerpts of captions, so we have to extract the individual figure URLs in order to scrape their full captions (and search for keyword matches). In order to extract a data element from an html document, we need to identify the tag associated with that&amp;nbsp;element.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://selectorgadget.com/"&gt;SelectorGadget&lt;/a&gt; is a nifty tool to help you hone in on the &lt;span class="caps"&gt;CSS&lt;/span&gt; selectors of interest. Installation is ridiculously easy: just drag the link on the SelectorGadget page to your browser bookmark&amp;nbsp;bar!&lt;/p&gt;
&lt;p&gt;For example, let&amp;#8217;s identify the &lt;span class="caps"&gt;CSS&lt;/span&gt; selector for figure URLs using SelectorGadget in 3 clicks of the mouse. We&amp;#8217;ll demo SelectorGadget on a &lt;span class="caps"&gt;PMC&lt;/span&gt; &lt;a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3792566/"&gt;article&lt;/a&gt; that is returned in a query on Docetaxel and &lt;span class="caps"&gt;TGI&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In the screenshot below, I clicked on the &amp;#8220;Figure 3&amp;#8221; link as a starting point for selecting all such figure URLs. SelectorGadget identified the element as &amp;#8220;.figpopup&amp;#8221; in the gray toolbar at the bottom of the screenshot, highlighted the direct click in green, and highlighted all the other elements in yellow (total: 35 elements). Notice, however, that two links to Figure 4 have been automatically highlighted in the screenshot, one of which is a reference in the body of the&amp;nbsp;text.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;#8221;attachment_2250&amp;#8221; align=&amp;#8221;aligncenter&amp;#8221; width=&amp;#8221;381&amp;#8221;]&lt;a href="https://efavdb.github.io/wp-content/uploads/2015/08/selectorgadg1.png"&gt;&lt;img alt="A click of the &amp;quot;Figure 3&amp;quot; link next to thumbnail highlights it in green, and similar elements are automatically highlighted in yellow." src="https://efavdb.github.io/wp-content/uploads/2015/08/selectorgadg1.png"&gt;&lt;/a&gt; A click of the &amp;#8220;Figure 3&amp;#8221; link next to thumbnail highlights it in green. Similar elements are automatically highlighted in&amp;nbsp;yellow.[/caption]&lt;/p&gt;
&lt;p&gt;To reduce the number of redundant figure &lt;span class="caps"&gt;URL&lt;/span&gt; links, I then clicked on the Figure 4 link in the body of the text in order to exclude it; it is accordingly highlighted in red to signify its&amp;nbsp;exclusion.&lt;/p&gt;
&lt;p&gt;The pattern-matching is momentarily worsened since the link to Figure 4 (bottom) is no longer highlighted. SelectorGadget&amp;#8217;s guess for the &lt;span class="caps"&gt;CSS&lt;/span&gt; selector becomes &amp;#8220;#lgnd_F3 .figpopup&amp;#8221;, of which there is only one element, highlighted in&amp;nbsp;green.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;#8221;attachment_2251&amp;#8221; align=&amp;#8221;aligncenter&amp;#8221; width=&amp;#8221;381&amp;#8221;]&lt;a href="https://efavdb.github.io/wp-content/uploads/2015/08/selectorgadg2.png"&gt;&lt;img alt="Elements excluded from the pattern matching are highlighted in red." src="https://efavdb.github.io/wp-content/uploads/2015/08/selectorgadg2.png"&gt;&lt;/a&gt; Elements excluded from the pattern matching are highlighted in&amp;nbsp;red.[/caption]&lt;/p&gt;
&lt;p&gt;After making the pattern match more specific with an exclusion, we have to re-generalize by re-selecting the Figure 4 bottom link. This time, SelectorGadget gets the pattern right with the &lt;span class="caps"&gt;CSS&lt;/span&gt; selector &amp;#8220;.icnblk_cntnt .figpopup&amp;#8221;, which describes 5 elements on the&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;#8221;attachment_2249&amp;#8221; align=&amp;#8221;aligncenter&amp;#8221; width=&amp;#8221;380&amp;#8221;]&lt;a href="https://efavdb.github.io/wp-content/uploads/2015/08/selectorgadg3.png"&gt;&lt;img alt="Third time's the charm: SelectorGadget has honed in on the CSS selectors that match the desired figure URLs." src="https://efavdb.github.io/wp-content/uploads/2015/08/selectorgadg3.png"&gt;&lt;/a&gt; Third time&amp;#8217;s the charm: SelectorGadget has honed in on the &lt;span class="caps"&gt;CSS&lt;/span&gt; selectors that match the desired figure&amp;nbsp;URLs.[/caption]&lt;/p&gt;
&lt;p&gt;Using rvest&amp;#8217;s &lt;code&gt;xml_nodes&lt;/code&gt; function, we extract components characterized by the &lt;span class="caps"&gt;CSS&lt;/span&gt; selector &lt;code&gt;.icnblk_cntnt .figpopup&lt;/code&gt; &amp;#8212; namely, the URLs of tables and&amp;nbsp;figures.&lt;/p&gt;
&lt;p&gt;[code language=&amp;#8221;r&amp;#8221;]&lt;br&gt;
popups.tags = article %&amp;gt;% xml_nodes(&amp;#8220;.icnblk_cntnt&amp;nbsp;.figpopup&amp;#8221;)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;With&lt;/span&gt; &lt;span class="k"&gt;some&lt;/span&gt; &lt;span class="k"&gt;more&lt;/span&gt; &lt;span class="n"&gt;parsing&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;filtering&lt;/span&gt; &lt;span class="k"&gt;similar&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;above&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;full&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;captions&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;grepped&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Caption&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt; &lt;span class="n"&gt;stored&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;SQLite&lt;/span&gt; &lt;span class="k"&gt;database&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;pubmedcentral_scraper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;III&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Generate&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;report&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;scraped&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
&lt;span class="c1"&gt;---------------------------------------------&lt;/span&gt;

&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;scraping&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;examined&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;directly&lt;/span&gt; &lt;span class="n"&gt;querying&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;SQLite&lt;/span&gt; &lt;span class="k"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="n"&gt;together&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;markdown_and_plot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;automatically&lt;/span&gt; &lt;span class="n"&gt;creates&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;report&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;simple&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="k"&gt;only&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;topic&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;plot_type&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;included&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="k"&gt;user&lt;/span&gt; &lt;span class="k"&gt;only&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="k"&gt;input&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;topic&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;plot_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;report&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;subsequently&lt;/span&gt; &lt;span class="k"&gt;generated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;markdown_and_plot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="n"&gt;calls&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;generate_markdown_code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;extracts&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;URLs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;database&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="k"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SELECT *\  &lt;/span&gt;
&lt;span class="s1"&gt;FROM ((figure JOIN article USING (pmcid))\  &lt;/span&gt;
&lt;span class="s1"&gt;JOIN figure_text USING (img_url))\  &lt;/span&gt;
&lt;span class="s1"&gt;WHERE (topic = &amp;quot;%s&amp;quot; AND plot_type = &amp;quot;%s&amp;quot;)\  &lt;/span&gt;
&lt;span class="s1"&gt;ORDER BY pmcid ASC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plot_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbGetQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;##&lt;/span&gt; &lt;span class="n"&gt;construct&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;URLs&lt;/span&gt;  
&lt;span class="n"&gt;img_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paste0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;http://www.ncbi.nlm.nih.gov&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;images$img_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;generate_markdown_code.R&lt;/code&gt; then loops through the &lt;em&gt;i&lt;/em&gt; images per article and, line by line, writes out markdown code of the image URLs and captions.&lt;br&gt;
[code language=&amp;#8221;r&amp;#8221;]&lt;br&gt;
for(i in seq_along(img_links))&amp;nbsp;{  &lt;/p&gt;
&lt;h2&gt;&amp;#8230;&lt;/h2&gt;
&lt;p&gt;img_md = paste0(&amp;#8220;&lt;img alt="pmcid: &amp;quot;,images$pmcid[i],&amp;quot;" src="`r img_links[" title=",i,&amp;quot;]`)"&gt;&lt;br&gt;
cat(img_md, file=outfile, append=T,&amp;nbsp;sep=&amp;#8221;\n&amp;#8221;)  &lt;/p&gt;
&lt;h2&gt;&amp;#8230;&lt;/h2&gt;
&lt;p&gt;}  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;`markdown_and_plot.R`&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="k"&gt;reads&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;renders&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;containing&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt; &lt;span class="n"&gt;embedded&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="ss"&gt;`knit2html`&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;knitr&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;scraper_%s_plots_for_%s.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plot_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="nf"&gt;knit2html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For a sample report that was generated for topic = Trastuzumab and plot_type = &lt;span class="caps"&gt;TGI&lt;/span&gt;, see &lt;a href="https://github.com/EFavDB/PubmedCentral_Scraper/blob/master/example/scraper_TGI_plots_for_trastuzumab.md"&gt;here&lt;/a&gt;. Note, github automatically renders markdown files into html, whereas html files are displayed as source code. However, the file that is actually intended for human perusal outside Github is the &lt;a href="https://github.com/EFavDB/PubmedCentral_Scraper/blob/master/example/scraper_TGI_plots_for_trastuzumab.html"&gt;html&lt;/a&gt; version, located in the same example subdirectory on&amp;nbsp;Github.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A look at the example report shows that there are a few false positives, i.e. images that don&amp;#8217;t actually correspond to plots of &lt;span class="caps"&gt;TGI&lt;/span&gt;, but the simplistic grep-keyword-method works well overall. There&amp;#8217;s plenty of room for improving the code, but as it stands, this code sure beats compiling reports by&amp;nbsp;hand!&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ve talked about the thought process behind building the program, but to put it to use, check it out on &lt;a href="https://github.com/EFavDB/PubmedCentral_Scraper"&gt;Github&lt;/a&gt;.&lt;/p&gt;</content><category term="Programming,"></category><category term="methods"></category><category term="tools"></category><category term="database"></category><category term="R"></category><category term="SQL"></category><category term="web scraping"></category></entry><entry><title>Reshaping Data in R</title><link href="https://efavdb.github.io/reshaping-data-in-r" rel="alternate"></link><published>2015-06-06T19:17:00-07:00</published><updated>2015-06-06T19:17:00-07:00</updated><author><name>Cathy Yeh</name></author><id>tag:efavdb.github.io,2015-06-06:/reshaping-data-in-r</id><summary type="html">&lt;p&gt;Today, we&amp;#8217;ll talk about reshaping data in R. At the same time, we&amp;#8217;ll see how for-loops can be avoided by using R functionals (functions of functions). Functionals are faster than for-loops and make code easier to read by clearly laying out the intent of a&amp;nbsp;loop.  &lt;/p&gt;
&lt;h3&gt;The&amp;nbsp;Task …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;Today, we&amp;#8217;ll talk about reshaping data in R. At the same time, we&amp;#8217;ll see how for-loops can be avoided by using R functionals (functions of functions). Functionals are faster than for-loops and make code easier to read by clearly laying out the intent of a&amp;nbsp;loop.  &lt;/p&gt;
&lt;h3&gt;The&amp;nbsp;Task&lt;/h3&gt;
&lt;p&gt;Suppose you&amp;#8217;re given the two tables below, saved as individual .csv files.  Each table contains measurements of plant height on specific days. The plants are split into fertilizer treatment groups A and B, and each plant can be uniquely identified by its&amp;nbsp;id.&lt;/p&gt;
&lt;p&gt;Day&amp;nbsp;1&lt;/p&gt;
&lt;p&gt;day&lt;/p&gt;
&lt;p&gt;group&lt;/p&gt;
&lt;p&gt;id&lt;/p&gt;
&lt;p&gt;height&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;p&gt;A.1&lt;/p&gt;
&lt;p&gt;1.1&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;p&gt;A.2&lt;/p&gt;
&lt;p&gt;1.2&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;B&lt;/p&gt;
&lt;p&gt;B.1&lt;/p&gt;
&lt;p&gt;1.0&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;B&lt;/p&gt;
&lt;p&gt;B.2&lt;/p&gt;
&lt;p&gt;0.9&lt;/p&gt;
&lt;p&gt;Day&amp;nbsp;2&lt;/p&gt;
&lt;p&gt;day&lt;/p&gt;
&lt;p&gt;group&lt;/p&gt;
&lt;p&gt;id&lt;/p&gt;
&lt;p&gt;height&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;p&gt;A.1&lt;/p&gt;
&lt;p&gt;1.5&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;A&lt;/p&gt;
&lt;p&gt;A.2&lt;/p&gt;
&lt;p&gt;1.5&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;B&lt;/p&gt;
&lt;p&gt;B.1&lt;/p&gt;
&lt;p&gt;2.1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;B&lt;/p&gt;
&lt;p&gt;B.2&lt;/p&gt;
&lt;p&gt;1.9&lt;/p&gt;
&lt;p&gt;Your task is to split the data by treatment group rather than day. The desired output is one file per group, with day on the vertical of the new tables, plant id on the horizontal, and height as the value inside the table. For example, the new table for group A would&amp;nbsp;be:&lt;/p&gt;
&lt;p&gt;Group&amp;nbsp;A&lt;/p&gt;
&lt;p&gt;day&lt;/p&gt;
&lt;p&gt;A.1&lt;/p&gt;
&lt;p&gt;A.2&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;1.1&lt;/p&gt;
&lt;p&gt;1.2&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;1.5&lt;/p&gt;
&lt;p&gt;1.5&lt;/p&gt;
&lt;p&gt;This example can be manually formatted in Excel pretty quickly, but in real life, data only looks like this if you&amp;#8217;re in first grade. So, we&amp;#8217;re going to take a little time to write a script now in order to save a lot of time in the&amp;nbsp;future.&lt;/p&gt;
&lt;h3&gt;The code broken&amp;nbsp;down&lt;/h3&gt;
&lt;p&gt;First, let&amp;#8217;s load some libraries that are useful for reshaping&amp;nbsp;data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;library(&amp;quot;plyr&amp;quot;)  &lt;/span&gt;
&lt;span class="err"&gt;library(&amp;quot;reshape2&amp;quot;)  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(To install, e.g. the plyr package, simply type &lt;code&gt;install.packages("plyr")&lt;/code&gt; in the R&amp;nbsp;console.)&lt;/p&gt;
&lt;p&gt;Then store the full names, including directory path, of the files in a character vector. Here, the input .csv files are stored in the subdirectory&amp;nbsp;&amp;#8220;input&amp;#8221;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;in_files = list.files(path = &amp;quot;input&amp;quot;, pattern=&amp;quot;*.csv&amp;quot;, full.names = T)  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we&amp;#8217;ll use &lt;code&gt;lapply(...)&lt;/code&gt;, one of base R&amp;#8217;s functionals, to read the input files into a list of data frames, which we call&amp;nbsp;list_dfperday.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;list_dfperday = lapply(in_files, read.csv)  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;lapply()&lt;/code&gt; loops over the the names of the files in &lt;code&gt;in_files&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to each file, apply the function &lt;code&gt;read.csv()&lt;/code&gt;, which reads the contents of the file into a data&amp;nbsp;frame&lt;/li&gt;
&lt;li&gt;output the result into a list of data frames, called dfs, of the same length as the character vector containing the file&amp;nbsp;names&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bind together (rbind) the data frames in the list by rows into a single data frame, so we can more conveniently subset the data by&amp;nbsp;group.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;df = ldply(list_dfperday, rbind)  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the &lt;code&gt;plyr&lt;/code&gt; package, the first two letters in the &amp;#8220;&amp;#8212;ply&amp;#8221; functions indicate what type of object is being transformed into another. In this case, we are reshaping a list (&amp;#8216;l&amp;#8217;) of data frames into a data frame (&amp;#8216;d&amp;#8217;), hence&amp;nbsp;&amp;#8220;ldply&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Define a function to cast the data into a data frame with a shape specified by the formula &lt;code&gt;day ~ id&lt;/code&gt;: per &lt;em&gt;day&lt;/em&gt; (x-variable), output the corresponding height (value.var) of each plant &lt;em&gt;id&lt;/em&gt;&amp;nbsp;(y-variable).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cast_short = function(mydata) dcast(mydata, day ~ id, value.var = height)  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the function &amp;#8220;cast_short&amp;#8221; takes as its argument a data frame &amp;#8220;mydata&amp;#8221; (containing columns &amp;#8220;day&amp;#8221; and &amp;#8220;id&amp;#8221;) and returns a reshaped data frame with &amp;#8220;day&amp;#8221; on the rows and &amp;#8220;id&amp;#8221; on the&amp;nbsp;columns.&lt;/p&gt;
&lt;p&gt;Now apply the function we just defined to each treatment group. Store the outcome of each application of &lt;code&gt;cast_short&lt;/code&gt; into a list. (Also compare to the earlier use of &lt;code&gt;ldply&lt;/code&gt;.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;list_dfpergroup = dlply(df, .(group), cast_short)  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;#8217;s finally time to write the formatted data frames to .csv files. We&amp;#8217;ll output them in a new directory called &amp;#8220;output&amp;#8221; with the aid of another base R functional &lt;code&gt;mapply&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;outdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;outnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paste0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_dfpergroup&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;mapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  
&lt;span class="n"&gt;list_dfpergroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="n"&gt;outnames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;mapply&lt;/code&gt; allows functions with multiple arguments to be applied in a loop. Here, we&amp;#8217;ve defined an anonymous, i.e. unnamed, function within mapply that has two arguments: the value of &lt;em&gt;x&lt;/em&gt; is given by list_dfpergroup, and &lt;em&gt;y&lt;/em&gt; is given by the character vector outnames. In other words, mapply steps through the list and vector simultaneously, writing list_dfpergroup&lt;span class="math"&gt;\(_i\)&lt;/span&gt; to a file named outnames&lt;span class="math"&gt;\(_i\)&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;The code in one&amp;nbsp;piece&lt;/h3&gt;
&lt;p&gt;Now here&amp;#8217;s the code all in one piece. Note that the core reshaping takes place in three lines, starting at the line containing &lt;code&gt;ldply&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;plyr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;reshape2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;in_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;*.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;full&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;list_dfperday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ldply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_dfperday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rbind&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;cast_short&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mydata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;dcast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mydata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;day&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;list_dfpergroup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dlply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.(&lt;/span&gt;&lt;span class="k"&gt;group&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;cast_short&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;outdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;outnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paste0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_dfpergroup&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;mapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  
&lt;span class="n"&gt;list_dfpergroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
&lt;span class="n"&gt;outnames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Programming"></category><category term="programming"></category><category term="R"></category></entry></feed>