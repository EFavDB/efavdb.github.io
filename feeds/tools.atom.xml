<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>EFAVDB - Tools</title><link href="https://efavdb.com/" rel="alternate"></link><link href="https://efavdb.com/feeds/tools.atom.xml" rel="self"></link><id>https://efavdb.com/</id><updated>2016-03-22T15:02:00-07:00</updated><subtitle>Everybody's Favorite Data Blog</subtitle><entry><title>Try Caffe pre-installed on a VirtualBox image</title><link href="https://efavdb.com/caffe-virtualbox" rel="alternate"></link><published>2016-03-22T15:02:00-07:00</published><updated>2016-03-22T15:02:00-07:00</updated><author><name>Cathy Yeh</name></author><id>tag:efavdb.com,2016-03-22:/caffe-virtualbox</id><summary type="html">&lt;p&gt;A previous &lt;a href="http://efavdb.github.io/deep-learning-with-jupyter-on-aws"&gt;post&lt;/a&gt; showed beginners how to try out deep learning libraries&amp;nbsp;by&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;using an Amazon Machine Image (&lt;span class="caps"&gt;AMI&lt;/span&gt;) pre-installed with deep learning&amp;nbsp;libraries&lt;/li&gt;
&lt;li&gt;setting up a Jupyter notebook server to play with said&amp;nbsp;libraries&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you have VirtualBox and &lt;a href="https://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;, you can follow a similar procedure on your own …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A previous &lt;a href="http://efavdb.github.io/deep-learning-with-jupyter-on-aws"&gt;post&lt;/a&gt; showed beginners how to try out deep learning libraries&amp;nbsp;by&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;using an Amazon Machine Image (&lt;span class="caps"&gt;AMI&lt;/span&gt;) pre-installed with deep learning&amp;nbsp;libraries&lt;/li&gt;
&lt;li&gt;setting up a Jupyter notebook server to play with said&amp;nbsp;libraries&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you have VirtualBox and &lt;a href="https://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;, you can follow a similar procedure on your own computer. The advantage is that you can develop locally, then deploy on an expensive &lt;span class="caps"&gt;AWS&lt;/span&gt; &lt;span class="caps"&gt;EC2&lt;/span&gt; gpu instance when your scripts are&amp;nbsp;ready.&lt;/p&gt;
&lt;p&gt;For example, &lt;a href="http://caffe.berkeleyvision.org/"&gt;Caffe&lt;/a&gt;, the machine vision framework, allows you to seamlessly transition between cpu- and gpu-mode, and is available as a &lt;a href="https://atlas.hashicorp.com/malthejorgensen/boxes/caffe-deeplearning"&gt;vagrant box&lt;/a&gt; running Ubuntu 14.04 (&lt;a href="#virtualization"&gt;**&lt;/a&gt;64-bit), with Caffe&amp;nbsp;pre-installed.&lt;/p&gt;
&lt;p&gt;To add the box, type on the command line:
&lt;code&gt;vagrant box add malthejorgensen/caffe-deeplearning&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you don&amp;#8217;t already have VirtualBox and Vagrant installed, you can find instructions online, or look at my &lt;a href="#vagrant_install"&gt;dotfiles&lt;/a&gt; to get an&amp;nbsp;idea.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="gotchas"&gt;Gotchas&lt;/h2&gt;
&lt;h3 id="ssh-authentication-failure"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt; authentication&amp;nbsp;failure&lt;/h3&gt;
&lt;p&gt;For me, the box had the wrong public key in &lt;code&gt;/home/vagrant/.ssh/authorized_keys file&lt;/code&gt;, which gave me “authentication failure” upon starting up the box with &lt;code&gt;vagrant up&lt;/code&gt;. This was fixed&amp;nbsp;by:&lt;/p&gt;
&lt;p&gt;Manually ssh into the box: &lt;code&gt;vagrant ssh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then type (key taken from &lt;a href="https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub"&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key&amp;quot;&lt;/span&gt; &amp;gt; ~/.ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Log out of the box, reload the box with &lt;code&gt;vagrant reload&lt;/code&gt;, and hopefully the ssh authentication error is&amp;nbsp;fixed.&lt;/p&gt;
&lt;h3 id="jupyter-notebook-server"&gt;Jupyter notebook&amp;nbsp;server&lt;/h3&gt;
&lt;p&gt;By default, the box has a notebook server on port 8003 that starts up from the /home/vagrant/caffe/examples directory, to be used in conjunction with port forwarding set in the Vagrant file:
&lt;code&gt;config.vm.network "forwarded_port", guest: 8003, host: 8003&lt;/code&gt;
With the default setup, go to &lt;code&gt;http://localhost:8003&lt;/code&gt; in your browser to access&amp;nbsp;/home/vagrant/caffe/examples.&lt;/p&gt;
&lt;p&gt;The default server setup limits access to only /home/vagrant/caffe/examples, so I prefer to set up my own configuration of the jupyter notebook server on port 8888 (allowing port forwarding of port 8888 in the Vagrantfile as well) and then start up the server from /home/vagrant, or wherever I&amp;#8217;m working. To do&amp;nbsp;this,&lt;/p&gt;
&lt;p&gt;Log in to the box: &lt;code&gt;vagrant ssh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then create the notebook config file &lt;code&gt;~/.jupyter/jupyter_notebook_config.py&lt;/code&gt; containing the following&amp;nbsp;lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;c.NotebookApp.ip = &amp;#39;*&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;c.NotebookApp.open_browser = False&lt;/span&gt;
&lt;span class="err"&gt;c.NotebookApp.port = 8888&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="vagrantfile"&gt;Vagrantfile&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s the vagrant file that worked for&amp;nbsp;me:&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Scripts to &lt;a href="https://github.com/frangipane/.dotfiles/blob/master/install/apt-get.sh"&gt;install Virtualbox&lt;/a&gt; (line 31 and onwards) and &lt;a href="https://github.com/frangipane/.dotfiles/blob/master/install/install-vagrant.sh"&gt;install Vagrant&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;** This is a 64-bit box, so you need to have Intel &lt;span class="caps"&gt;VT&lt;/span&gt;-x enabled in your &lt;span class="caps"&gt;BIOS&lt;/span&gt;.&lt;/p&gt;</content><category term="Tools"></category><category term="Caffe"></category><category term="deep learning"></category><category term="Jupyter"></category><category term="cloud"></category></entry><entry><title>Start deep learning with Jupyter notebooks in the cloud</title><link href="https://efavdb.com/deep-learning-with-jupyter-on-aws" rel="alternate"></link><published>2016-03-10T20:41:00-08:00</published><updated>2016-03-10T20:41:00-08:00</updated><author><name>Cathy Yeh</name></author><id>tag:efavdb.com,2016-03-10:/deep-learning-with-jupyter-on-aws</id><summary type="html">&lt;p&gt;Want a quick and easy way to play around with deep learning libraries? Puny &lt;span class="caps"&gt;GPU&lt;/span&gt; got you down? Thanks to Amazon Web Services (&lt;span class="caps"&gt;AWS&lt;/span&gt;) &amp;#8212; specifically, &lt;span class="caps"&gt;AWS&lt;/span&gt; Elastic Compute Cloud (&lt;span class="caps"&gt;EC2&lt;/span&gt;) &amp;#8212; no data scientist need be left&amp;nbsp;behind.&lt;/p&gt;
&lt;p&gt;Jupyter/IPython notebooks are indispensable tools for learning and tinkering. This post shows …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Want a quick and easy way to play around with deep learning libraries? Puny &lt;span class="caps"&gt;GPU&lt;/span&gt; got you down? Thanks to Amazon Web Services (&lt;span class="caps"&gt;AWS&lt;/span&gt;) &amp;#8212; specifically, &lt;span class="caps"&gt;AWS&lt;/span&gt; Elastic Compute Cloud (&lt;span class="caps"&gt;EC2&lt;/span&gt;) &amp;#8212; no data scientist need be left&amp;nbsp;behind.&lt;/p&gt;
&lt;p&gt;Jupyter/IPython notebooks are indispensable tools for learning and tinkering. This post shows how to set up a public Jupyter notebook server in &lt;span class="caps"&gt;EC2&lt;/span&gt; and then access it remotely through your web browser, just as you would if you were using a notebook launched from your own&amp;nbsp;laptop.&lt;/p&gt;
&lt;p&gt;For a beginner, having to both set up deep learning libraries and navigate the &lt;span class="caps"&gt;AWS&lt;/span&gt; menagerie feels like getting thrown into the deep end when you just want to stick a toe in. You can skip the hassle of setting up deep learning frameworks from scratch by choosing an Amazon Machine Image (&lt;span class="caps"&gt;AMI&lt;/span&gt;) that comes pre-installed with the libraries and their dependencies. (Concerned about costs? &amp;#8212; see the note&lt;a href="#note1"&gt;*&lt;/a&gt; at the bottom of this&amp;nbsp;post.)&lt;/p&gt;
&lt;p&gt;For example, the Stanford class, &lt;a href="http://cs231n.stanford.edu/"&gt;CS231n: Convolutional Neural Networksfor Visual Recognition&lt;/a&gt;, has provided a public &lt;span class="caps"&gt;AMI&lt;/span&gt; with these&amp;nbsp;specs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cs231n_caffe_torch7_keras_lasagne_v2&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;AMI&lt;/span&gt; &lt;span class="caps"&gt;ID&lt;/span&gt;: ami-125b2c72 in the us-west-1&amp;nbsp;region&lt;/li&gt;
&lt;li&gt;Use a g2.2xlarge&amp;nbsp;instance.&lt;/li&gt;
&lt;li&gt;Caffe, Torch7, Theano, Keras and Lasagne are pre-installed. Python bindings of caffe are available. It has &lt;span class="caps"&gt;CUDA&lt;/span&gt; 7.5 and CuDNN&amp;nbsp;v3.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;#8217;re new to &lt;span class="caps"&gt;AWS&lt;/span&gt;, CS231n provides a nice step-by-step &lt;a href="http://cs231n.github.io/aws-tutorial/"&gt;&lt;span class="caps"&gt;AWS&lt;/span&gt; tutorial&lt;/a&gt; with lots of screenshots. We&amp;#8217;re just going to tweak their procedure to enable access to Jupyter/IPython&amp;nbsp;notebooks.&lt;/p&gt;
&lt;p&gt;After you&amp;#8217;re done, you&amp;#8217;ll be able to work through tutorials in notebook format like those provided by caffe in their examples folder, e.g. &lt;a href="http://nbviewer.jupyter.org/github/BVLC/caffe/blob/master/examples/00-classification.ipynb"&gt;00-classification.ipynb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ve written a little bash script &lt;code&gt;jupyter_userdata.sh&lt;/code&gt; to execute Jupyter&amp;#8217;s &lt;a href="http://jupyter-notebook.readthedocs.org/en/latest/public_server.html"&gt;instructions&lt;/a&gt; for setting up a public notebook server, so you don&amp;#8217;t have to manually configure the notebook server every time you want to spin up a new &lt;span class="caps"&gt;AMI&lt;/span&gt;&amp;nbsp;instance.&lt;/p&gt;
&lt;p&gt;For the script to work, Jupyter itself should already be installed &amp;#8212; which it is in the CS231n &lt;span class="caps"&gt;AMI&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;You just have to edit the password in the script. To generate a hashed password, use&amp;nbsp;IPython:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;notebook.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Enter&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Verify&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sha1:bcd259ccf...&amp;lt;your hashed password here&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace the right hand side of line 24 in the script with the hashed password you just&amp;nbsp;generated.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Then, follow these steps to launch an &lt;span class="caps"&gt;EC2&lt;/span&gt;&amp;nbsp;instance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; First, follow the CS231n &lt;a href="http://cs231n.github.io/aws-tutorial/"&gt;&lt;span class="caps"&gt;AWS&lt;/span&gt; tutorial&lt;/a&gt; up until the step &lt;em&gt;&amp;#8220;Choose the instance type &lt;code&gt;g2.2xlarge&lt;/code&gt;, and click on &amp;#8220;Review and Launch&amp;#8221;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t click on &amp;#8220;Review and Launch&amp;#8221;&amp;nbsp;yet!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Here&amp;#8217;s where we add a couple extra steps to the tutorial.&lt;a href="#note2"&gt;**&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We&amp;#8217;re going to supply the shell script as &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html"&gt;user-data&lt;/a&gt;, a way to pass in scripts to automate configurations to your &lt;span class="caps"&gt;AMI&lt;/span&gt;. Instead of clicking on &amp;#8220;Review and Launch&amp;#8221;, click on the gray button in the lower right &amp;#8220;Next: Configure Instance&amp;nbsp;Details&amp;#8221;.&lt;/p&gt;
&lt;p&gt;In the next page, click on the arrowhead next to &amp;#8220;Advanced Details&amp;#8221; to expand its options. Click on the radio button next to &amp;#8220;As text&amp;#8221;, then copy and paste the text from &lt;code&gt;jupyter_userdata.sh&lt;/code&gt; (modified with your password) into the&amp;nbsp;field.&lt;/p&gt;
&lt;p&gt;Warning: if you click on &amp;#8220;As file&amp;#8221; instead and browse to wherever you saved &lt;code&gt;jupyter_userdata.sh&lt;/code&gt;, the file must first be &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html"&gt;base64-encoded&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://efavdb.com/wp-content/uploads/2016/03/Step3_Configure-Instance-Details.png"&gt;&lt;img alt="" src="https://efavdb.com/wp-content/uploads/2016/03/Step3_Configure-Instance-Details.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Next, (skipping steps 4. and 5.) click on the link to &amp;#8220;6. Configure Security Group&amp;#8221; near the top of the page. By default, &lt;span class="caps"&gt;SSH&lt;/span&gt; is enabled, but we need to enable access to the notebook server, whose port we&amp;#8217;ve set as 8888 in the bash&amp;nbsp;script.&lt;/p&gt;
&lt;p&gt;Click on the grey button &amp;#8220;Add Rule&amp;#8221;, then for the new rule, choose Type: Custom &lt;span class="caps"&gt;TCP&lt;/span&gt; Rule; Protocol: &lt;span class="caps"&gt;TCP&lt;/span&gt;; Port Range: 8888; Source:&amp;nbsp;Anywhere.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://efavdb.com/wp-content/uploads/2016/03/Step6_Configure-Security-Group.png"&gt;&lt;img alt="" src="https://efavdb.com/wp-content/uploads/2016/03/Step6_Configure-Security-Group.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Now, pick up where you left off in the CS231n tutorial (&amp;#8220;&lt;em&gt;&amp;#8230; click on &amp;#8220;Review and Launch&lt;/em&gt;&amp;#8220;.), which takes you to &amp;#8220;Step 7. Review Instance Launch&amp;#8221;. Complete the&amp;nbsp;tutorial.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Check that the Jupyter notebook server was set up&amp;nbsp;correctly:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ssh into your instance (see CS231n&amp;nbsp;instructions).&lt;/li&gt;
&lt;li&gt;Navigate to &lt;code&gt;~/caffe/examples&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Start the notebook server using the &lt;code&gt;jupyter notebook&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In your web browser, access the notebook server with https://PUBLIC_IP:8888, where PUBLIC_IP is the public &lt;span class="caps"&gt;IP&lt;/span&gt; of your instance, displayed from the instance description on your &lt;span class="caps"&gt;AWS&lt;/span&gt; dashboard. Your browser will warn that your self-signed certificate is insecure or&amp;nbsp;unrecognized.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://efavdb.com/wp-content/uploads/2016/03/scary-browser-warning.png"&gt;&lt;img alt="" src="https://efavdb.com/wp-content/uploads/2016/03/scary-browser-warning.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s ok &amp;#8212; click past the warnings, and you should get a sign-in page. Type in your&amp;nbsp;password.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, you should see the files and directories in &lt;code&gt;/home/ubuntu/caffe/examples&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Open one of the example notebooks, e.g. &lt;code&gt;00-classification.ipynb&lt;/code&gt;, and try running some cells to make sure everything is&amp;nbsp;working.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Voila! We hope this guide removes some obstacles to getting started. Happy&amp;nbsp;learning!&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;The cost of running a &lt;span class="caps"&gt;GPU&lt;/span&gt; instance is high compared to many other instance types, but still very reasonable if you&amp;#8217;re just tinkering for a few hours on a pre-trained model, not training a whole neural network from&amp;nbsp;scratch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out the &lt;a href="https://aws.amazon.com/ec2/pricing/"&gt;pricing&lt;/a&gt; for an &lt;span class="caps"&gt;EC2&lt;/span&gt; instance in the section &amp;#8220;On-Demand Instance Prices&amp;#8221; and selecting the region of your &lt;span class="caps"&gt;AMI&lt;/span&gt;. At the time of writing, the cost of an on-demand &lt;code&gt;g2.2xlarge&lt;/code&gt; instance in the &lt;span class="caps"&gt;US&lt;/span&gt; West (Northern California) region was $0.7/hour, whereas the price of a &lt;a href="https://aws.amazon.com/ec2/spot/pricing/"&gt;spot&lt;/a&gt; instance (a cheaper alternative which will automatically terminate when the spot pricing exceeds your bid) was&amp;nbsp;$0.3/hour.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; If you followed the CS231n tutorial exactly and forgot to supply user data, you can still use this script. First modify the security configuration of your instance according to step &lt;/strong&gt;3**. Then use the &lt;code&gt;scp&lt;/code&gt; command to copy the script from your local computer to your instance, &lt;code&gt;ssh&lt;/code&gt; into your instance, then execute the script: &lt;code&gt;source jupyter_userdata.sh&lt;/code&gt;. If you need help with using &lt;code&gt;scp&lt;/code&gt;, see &amp;#8220;To use &lt;span class="caps"&gt;SCP&lt;/span&gt; to transfer a file&amp;#8221; in this &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html"&gt;guide&lt;/a&gt;.&lt;/p&gt;</content><category term="Tools"></category><category term="AWS"></category><category term="bash"></category><category term="cloud"></category><category term="deep learning"></category><category term="Jupyter"></category></entry><entry><title>Quick tutorial on MySQL</title><link href="https://efavdb.com/quick-tutorial-on-mysql" rel="alternate"></link><published>2015-01-16T16:07:00-08:00</published><updated>2015-01-16T16:07:00-08:00</updated><author><name>Jonathan Landy</name></author><id>tag:efavdb.com,2015-01-16:/quick-tutorial-on-mysql</id><summary type="html">&lt;p&gt;Here, we give a quick (&amp;lt; 30 mins) introduction to the open source database software package MySQL. The post is intended to be useful for folks totally new to the program, as well as for those who find that they often need reminders on its basic syntax (that is, people like …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here, we give a quick (&amp;lt; 30 mins) introduction to the open source database software package MySQL. The post is intended to be useful for folks totally new to the program, as well as for those who find that they often need reminders on its basic syntax (that is, people like&amp;nbsp;us).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://twitter.com/efavdb"&gt;Follow&amp;nbsp;@efavdb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow us on twitter for new submission&amp;nbsp;alerts!&lt;/p&gt;
&lt;h4 id="getting-started"&gt;&lt;strong&gt;Getting&amp;nbsp;started&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;MySQL is a database software package that allows users to quickly access subsets of data contained within tables, and also to carry out simple operations on this data. The software is quite powerful, but it can be surprisingly unintuitive for beginners. The best way to get the hang of it is to play around with it a bit. This post provides a set of commands that should help you get a feel for how it works. If you&amp;#8217;re a beginner reading this, we suggest &lt;a href="http://dev.mysql.com/doc/refman/5.5/en/installing.html"&gt;installing&lt;/a&gt; it on your personal computer or server, and following along by trying each of the commands we go through here. Once it&amp;#8217;s installed and you have its server running, you can often access MySQL from the command line by&amp;nbsp;typing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On a mac, you may need to use the following&amp;nbsp;though&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/local/mysql/bin/mysql -uroot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once mysql is loaded, you can see what databases are available by&amp;nbsp;typing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;DATABASES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that a semi-colon is used to terminate commands: In general, these can extend across multiple lines and the semi-colon tells the program where the command stops. Also, MySQL is case-insensitive, but it is considered good form to have all command calls capitalized for easier reading. If no databases yet exist, you can create one as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="n"&gt;animalDB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, &lt;code&gt;animalDB&lt;/code&gt; is the name of the database. From the list of available databases,
you can select one of interest with the &lt;code&gt;USE&lt;/code&gt; command. For&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;USE&lt;/span&gt; &lt;span class="n"&gt;animalDB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each database can contain many tables. To see the tables contained in a database, use the &lt;span class="caps"&gt;SHOW&lt;/span&gt;&amp;nbsp;command,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="table-creation-and-alteration"&gt;&lt;strong&gt;Table creation and&amp;nbsp;alteration&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span class="caps"&gt;SQL&lt;/span&gt; tables have a name and a set of rows and columns. The columns have types that are defined upon table creation (&lt;code&gt;INT, BIGINT, FLOAT, DOUBLE, CHAR, VARCHAR&lt;/code&gt;, etc.). The rows correspond to individual table entries. To illustrate, we’ll now create a table called “MyPets”, with a column for pet name, species, and age. This is done with the&amp;nbsp;command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;species&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we are using the &lt;code&gt;VARCHAR&lt;/code&gt; type for our two string columns. The argument supplied allows us to use strings up to length &lt;code&gt;10&lt;/code&gt; for these entries. We could also have used the &lt;code&gt;CHAR(10)&lt;/code&gt; type here, but that would result in trailing spaces following names shorter than &lt;code&gt;10&lt;/code&gt; characters. We now insert some entries using the &lt;code&gt;INSERT&lt;/code&gt; command,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Bottles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;species&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Mac&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Hector&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we’ve illustrated two different methods to do insertion. In the first and third lines, we have values for all columns. However, in the second, no age is supplied, so we have to specify which columns the values we are supplying correspond to. The age column for this entry will read &lt;code&gt;NULL&lt;/code&gt;, since no value was provided for it. To view the table, we write – with &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;∗&lt;/code&gt; meaning &amp;#8220;retrieve&amp;#8221; and “all”, respectively&amp;nbsp;–&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;---------+---------+------+&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;species&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;---------+---------+------+&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Bottles&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Mac&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Hector&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Cat&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;---------+---------+------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Additional &lt;code&gt;SELECT&lt;/code&gt; queries are given below that illustrate how one can select and operate on subsets of the columns and rows. To add an age for Mac, we use the &lt;code&gt;UPDATE, SET&lt;/code&gt;, and &lt;code&gt;WHERE&lt;/code&gt; commands,&amp;nbsp;writing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;
    &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Mac&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To see that this and the other commands that follow work as expected, try running the &lt;code&gt;SELECT&lt;/code&gt; command above after each application. To delete a row from the table, we use the &lt;span class="caps"&gt;DELETE&lt;/span&gt;&amp;nbsp;command,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DELETE&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Hector&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is also possible to add or subtract columns from a table. To add a column, we use
the &lt;code&gt;ALTER&lt;/code&gt; and &lt;code&gt;ADD COLUMN&lt;/code&gt; commands,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;
    &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="n"&gt;litters&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;
    &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last line here is not necessary. Without it, the command would create the column and set each row’s value there to &lt;code&gt;NULL&lt;/code&gt;. To delete a column, we use the &lt;code&gt;DROP&lt;/code&gt; command,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;
    &lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="n"&gt;litters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Caveat:&lt;/em&gt; While row addition and removal can always be carried out quickly, addition and removal of columns scales linearly with table size. The reason is that these operations are generally carried out by copying the original table into a second table having the desired new structure. For this reason, it is generally a good idea to plan ahead and make sure any new table has all the columns you foresee might be&amp;nbsp;needed.&lt;/p&gt;
&lt;h4 id="selection-queries-learn-by-example"&gt;&lt;strong&gt;&lt;span class="caps"&gt;SELECTION&lt;/span&gt; queries &amp;#8212; learn by&amp;nbsp;example&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Example conditional&amp;nbsp;commands:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is the name and age each of my&amp;nbsp;pets?&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;mypets&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;How many dogs have I&amp;nbsp;got?&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;mypets&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;species&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Show me just the first two pets in my&amp;nbsp;table.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;mypets&lt;/span&gt;
    &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Show me my pets in age-descending&amp;nbsp;order.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;
    &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Which of my dogs are under 4 years&amp;nbsp;old?&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
      &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;species&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Which animals have names that start with the letter&amp;nbsp;“M”?&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;mypets&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;M%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Which animals have the letter “E” somewhere in their&amp;nbsp;name?&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;mypets&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;%E%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Example &lt;span class="caps"&gt;GROUP&lt;/span&gt; &lt;span class="caps"&gt;BY&lt;/span&gt; commands (see also &lt;code&gt;MIN, MAX, SUM, STD&lt;/code&gt;,&amp;nbsp;etc.):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How many pets have I got of each&amp;nbsp;species?&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;species&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;mypets&lt;/span&gt;
    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;species&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;What is the average age of my pets, grouped by&amp;nbsp;species?&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;species&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;AVG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;mypets&lt;/span&gt;
    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;species&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="actions-on-multiple-tables"&gt;&lt;strong&gt;Actions on multiple&amp;nbsp;tables&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;To solidify what we&amp;#8217;ve learned above, try to now create a second table, called &lt;code&gt;PetDetails&lt;/code&gt;, like that above but with different age and species values. You can add other columns to it if you like. Once that&amp;#8217;s done, apply the &lt;code&gt;SHOW TABLES&lt;/code&gt; command to see that both tables are available. Next, learn to copy specific values from this new table into the first one, using commands&amp;nbsp;like&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PetDetails&lt;/span&gt;
      &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PetDetails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;
      &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PetDetails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;Note the use of the period here to specify from which table a certain column is to be selected from.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;&lt;em&gt;The&lt;/em&gt; &lt;code&gt;JOIN/ON&lt;/code&gt; &lt;em&gt;commands&lt;/em&gt;. The &lt;code&gt;JOIN&lt;/code&gt; command essentially creates something like a flattened outer product of two tables: If there are &lt;span class="math"&gt;\(n\)&lt;/span&gt; entries in the first table and &lt;span class="math"&gt;\(m\)&lt;/span&gt; in the second, the command returns a table with &lt;span class="math"&gt;\(n \times m\)&lt;/span&gt; rows. There is one row for each possible pairing, one entry taken from the first table and one from the second. All columns from both tables are then included in the new table. The &lt;span class="caps"&gt;ON&lt;/span&gt; command can be used to specify conditions on which pairs are to be included in the combined table. To illustrate, let’s define a new table of pet-trick&amp;nbsp;pairs&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;PetTricks&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;trick&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;PetTricks&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Bottles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Shake&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;PetTricks&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Bottles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Play dead&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;PetTricks&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Mac&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Shake&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;PetTricks&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Dogbert&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Consulting&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the following, we get the number of tricks each of my pets can&amp;nbsp;do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;num_tricks&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyPets&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;PetTricks&lt;/span&gt;
    &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PetTricks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we see for the first time that it is possible to select values from a table created &amp;#8220;on the fly&amp;#8221; (the table in parentheses, which you can print using the &lt;code&gt;SELECT&lt;/code&gt; command). We also see for the first time the concept of aliasing, applied through use of the &lt;code&gt;AS&lt;/code&gt; command.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Our last &amp;#8212; and most complicated &amp;#8212; example combines many of the ideas discussed above. If you can get to the point where you can replicate commands like this one, you&amp;#8217;ll be pretty much set to construct your own complex &lt;span class="caps"&gt;SQL&lt;/span&gt; queries: Let’s add a trick count to our first table, and then fill it in by querying the PetTricks&amp;nbsp;table.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;
      &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="n"&gt;num_tricks&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;
      &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;T1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Select&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;tot&lt;/span&gt;
        &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;PetTricks&lt;/span&gt;
        &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;T2&lt;/span&gt;
        &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;T1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_tricks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tot&lt;/span&gt;
        &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;T1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;---------+---------+------+------------+&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;species&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;num_tricks&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;---------+---------+------+------------+&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Bottles&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Mac&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Hector&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Cat&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;---------+---------+------+------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="other-tips"&gt;&lt;strong&gt;Other&amp;nbsp;tips&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Lastly, a few one-off tips that can be very&amp;nbsp;helpful.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Creating a new table similar another.&lt;/em&gt; The following command can come in handy when you’re dealing with tables that have many&amp;nbsp;columns:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;TNew&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="n"&gt;T1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, the command creates &lt;code&gt;TNew&lt;/code&gt;, a new table with column names and types like those of &lt;code&gt;T1&lt;/code&gt;. The entries of &lt;code&gt;T1&lt;/code&gt; are not copied over. If you want to copy some of them over, you can do that with a command&amp;nbsp;like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;TNew&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;T1&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;...);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Saving to a text file.&lt;/em&gt; Printing a table to a text file can sometimes be useful. To proceed, you first need to create a directory that MySQL can have write access to. On a mac, you can accomplish this from the terminal with the&amp;nbsp;following&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nb"&gt;cd&lt;/span&gt; /usr/local
    mkdir MySQLOutput
    sudo chmod -R &lt;span class="m"&gt;777&lt;/span&gt; MySQLOutput
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates the directory &lt;code&gt;/usr/local/MYSQLOutput&lt;/code&gt; with global read, write, and execute permissions. With this setup, we can write to a file from within MySQL with a command&amp;nbsp;like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;
        &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;OUTFILE&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;/usr/local/MySQLOutput/test.txt&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Scripts.&lt;/em&gt; For complicated queries, or queries that you would like to be able to run multiple times, it is useful to employ scripts. These can then be executed from within mysql using the &lt;code&gt;SOURCE&lt;/code&gt; command. To illustrate, suppose we have a text file called &lt;code&gt;/usr/local/MySQLOutput/test.txt&lt;/code&gt; within which we have written the&amp;nbsp;commands&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;Bad_dogs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DogID&lt;/span&gt; &lt;span class="nb"&gt;BIGINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Barks&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;Bad_dogs&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1234567890&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;666&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can run this from within MySQL using the&amp;nbsp;command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;SOURCE&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MySQLOutput&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates the table and inserts the example&amp;nbsp;entry.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Indexing.&lt;/em&gt; By creating an index, one can speed up &lt;code&gt;SELECT&lt;/code&gt; calls on large tables. You can think of an index heuristically as a second table having two columns: The first is a sorted version of one of the original table’s columns, and the second column is a pointer to the memory block where its corresponding entry sits (actually, an index usually sits in a B-tree, a structure similar to a binary-search tree). Entries can be quickly accessed via the index, generally in logarithmic time. To add a key to our first table,&amp;nbsp;write&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;MyPets&lt;/span&gt;
        &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This selects the name column as our index, which will speed up all &lt;code&gt;SELECT&lt;/code&gt; calls seeking entries with &lt;code&gt;name&lt;/code&gt; values satisfying some condition &amp;#8212; specified using &lt;code&gt;WHERE name = ...&lt;/code&gt;. You can actually index as many columns of a table as you like. However, this takes up disk space, and so should be avoided when the extra indexes are not useful. It is also possible to specify that you want one or more columns to be keys upon table&amp;nbsp;creation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Further study.&lt;/em&gt; At this point, we have covered most of the basics, but only the basics. If you get stumped by any tricky queries moving forward, we suggest visiting both &lt;a href="http://stackoverflow.com/"&gt;stackoverflow.com&lt;/a&gt; &amp;#8212; which has tons of interesting discussions on the topic &amp;#8212; and the &lt;a href="http://dev.mysql.com/doc/"&gt;MySQL documentation page&lt;/a&gt;, which goes over most everything and includes a tutorial in chapter 3 similar to this one. Both are excellent&amp;nbsp;resources.&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Tools"></category></entry><entry><title>Processing and processing.js tips and tricks in WordPress</title><link href="https://efavdb.com/processing-and-processing-js-tips-and-tricks" rel="alternate"></link><published>2015-01-05T00:12:00-08:00</published><updated>2015-01-05T00:12:00-08:00</updated><author><name>Dustin McIntosh</name></author><id>tag:efavdb.com,2015-01-05:/processing-and-processing-js-tips-and-tricks</id><summary type="html">&lt;p&gt;We recently developed our &lt;a href="http://efavdb.github.io/nba-dash"&gt;&lt;span class="caps"&gt;NBA&lt;/span&gt; dashboard&lt;/a&gt; in the programming language Processing. In addition, we have Processing apps in our post on &lt;a href="http://efavdb.github.io/methods-regression-without-negative-examples"&gt;classification without negative examples&lt;/a&gt; as well as our &lt;a href="http://efavdb.github.io/weekly-nba-predictions"&gt;weekly &lt;span class="caps"&gt;NBA&lt;/span&gt; predictions&lt;/a&gt;. Here, we will briefly describe (and recommend) Processing and discuss some tips and tricks we have discovered in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We recently developed our &lt;a href="http://efavdb.github.io/nba-dash"&gt;&lt;span class="caps"&gt;NBA&lt;/span&gt; dashboard&lt;/a&gt; in the programming language Processing. In addition, we have Processing apps in our post on &lt;a href="http://efavdb.github.io/methods-regression-without-negative-examples"&gt;classification without negative examples&lt;/a&gt; as well as our &lt;a href="http://efavdb.github.io/weekly-nba-predictions"&gt;weekly &lt;span class="caps"&gt;NBA&lt;/span&gt; predictions&lt;/a&gt;. Here, we will briefly describe (and recommend) Processing and discuss some tips and tricks we have discovered in developing and deploying our above-mentioned apps to our WordPress&amp;nbsp;blog.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://twitter.com/efavdb"&gt;Follow&amp;nbsp;@efavdb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow us on twitter for new submission&amp;nbsp;alerts!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Processing&amp;nbsp;Intro&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Your browser does not support the canvas&amp;nbsp;tag.&lt;/p&gt;
&lt;p&gt;JavaScript is required to view the contents of this&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;Processing is a high-level language built on top of java designed for producing neat interactive visualizations of ideas, data, and art.  A major benefit of Processing is that it is extremely accessible (see for example, &lt;a href="http://it-ebooks.info/book/244/"&gt;this ebook&lt;/a&gt; by &lt;a href="http://reas.com/"&gt;Reas&lt;/a&gt;and &lt;a href="http://benfry.com/"&gt;Fry&lt;/a&gt;): while it can now be used to produce considerably sophisticated visualizations, it was originally developed as a tool for teaching programming to people with little to no experience with computers (e.g., visual arts students). The little guy above is an example of a processing app. You can find the (remarkably simple) code for it &lt;a href="https://efavdb.com/wp-content/uploads/sketches/testSketch2/testSketch2.pde"&gt;here&lt;/a&gt; (we found this example in &lt;a href="http://processingjs.org/articles/p5QuickStart.html"&gt;this tutorial&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For people with technical backgrounds, you can be up and developing basic programs in a matter of hours (or perhaps even minutes). Here, our programming language of choice is typically Python and, fortunately, the people at Processing recently implemented &lt;a href="http://py.processing.org"&gt;Python-mode&lt;/a&gt; which made our transition all the more smooth (see Quirks below before you get too excited about this, however).  In just a couple of days we were able to build a quick prototype of our tool. Porting it to the web, however, we found to be a bit more&amp;nbsp;difficult.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Processing in WordPress&amp;nbsp;Tutorial&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We spent some time trying to figure out how to get everything working in WordPress. We thought it would be useful to outline the steps below for others interested in getting some Processing-based dynamic content on their own blog. In the end it is very straight forward, but getting some more advanced features of Processing (e.g., importing external images or data files) to work on the web requires some tricks which we will tackle in the next&amp;nbsp;section.&lt;/p&gt;
&lt;p&gt;1.  &lt;a href="http://processingjs.org/download/"&gt;Download&lt;/a&gt; the processing.js script and put it on your server.  This script defines a &amp;#8220;canvas&amp;#8221; element where your Processing code is executed on your&amp;nbsp;webpage.&lt;/p&gt;
&lt;p&gt;​2. In your theme&amp;#8217;s header file (header.php), add the following line of code to the body of the file (after &lt;body&gt; and before &lt;/body&gt;), changing the url to point to the script from step&amp;nbsp;1:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;script src=&amp;quot;url_to_processing.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can change this file using your dashboard in the Appearance - Editor menu, selecting &amp;#8220;Header (header.php)&amp;#8221; for the Template (see this screenshot - the first line is a comment).
&lt;a href="https://efavdb.com/wp-content/uploads/2014/12/WordPressHeader.png"&gt;&lt;img alt="" src="https://efavdb.com/wp-content/uploads/2014/12/WordPressHeader.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​3. Upload your pde script(s) to your server and they can be referenced using code like the following (replace the urls to point to your pde&amp;nbsp;scripts):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;canvas id=&amp;quot;testsketch&amp;quot; class=&amp;quot;alignright&amp;quot; data-processing-sources=&lt;/span&gt;
&lt;span class="x"&gt;&amp;quot;{static}/wp-content/uploads/sketches/testSketch2/testSketch2.pde&lt;/span&gt;
&lt;span class="x"&gt;additional_url.pde  yet_another_url.pde&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;Your browser does not support the canvas tag.&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;noscript&amp;gt;JavaScript is required to view the contents of this page.&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You simply place this code in the &amp;#8220;text&amp;#8221; view of any post or page in WordPress. Note that you don&amp;#8217;t need to have multiple pde scripts, in most simple cases you will only have one.  However, sometimes it is useful to call on multiple (see below quirk #3). To include multiple, simply place multiple urls (separated by spaces) between the quotes in the canvas&amp;nbsp;tag.&lt;/p&gt;
&lt;p&gt;​4. Enjoy! Wasn&amp;#8217;t that simple? Now you can mess around and create all sorts of cool, dynamic apps for your&amp;nbsp;blog.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Running list of processing quirks and&amp;nbsp;tips
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​1) It took us a while to come to the conclusion that there is, currently, no easy way to get Python-mode Processing code on the web (please let us know if we are wrong about that&amp;#8230;).  We ended up translating our Processing code from Python syntax to Javascript syntax and using &lt;a href="http://processingjs.org/"&gt;processing.js&lt;/a&gt; (as implied in our tutorial&amp;nbsp;above).&lt;/p&gt;
&lt;p&gt;​2) In order to load images for display in your app (if applicable), you will have to use the &lt;a href="http://processingjs.org/reference/preload/"&gt;preload directive&lt;/a&gt; in your pde script.  This comes in the form a of a comment at the top of the script: &lt;em&gt;/&lt;/em&gt; @pjs preload=&amp;#8221;url_to_myimage.jpg&amp;#8221;; &lt;em&gt;/&lt;/em&gt;. The &amp;#8220;@pjs&amp;#8221; tags this comment for processing.js to read and execute before the rest of the script runs.  It forces the browser to complete downloading and caching of the image before attempting to use&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;​3) We could not figure out a clean way of importing data from an external file (e.g., in csv or txt format).  Instead, we found that saving the external data in Javascript format in a separate pde file and running that file in addition to your main script (see step 3 from the tutorial above) worked well. As an example, &lt;a href="http://efavdb.com/wp-content/uploads/nba/completed.pde"&gt;here&lt;/a&gt; is a pde file that we use to feed in the results of &lt;span class="caps"&gt;NBA&lt;/span&gt; games that have already been played this season into our &lt;span class="caps"&gt;NBA&lt;/span&gt; dashboard. We scrape this data off the web and run a preprocessing python script to get the data in this format and save the completed.pde&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;​4) As a security precaution, many browsers (e.g., Chrome) won’t run a sketch that links to images or data stored on a separate server. As a consequence, when developing a sketch on your computer that links to data on your server, it may appear to not be working, even if coded properly. It&amp;#8217;s easy to misinterpret this issue as a bug, so keep it in mind. One way to avoid this is to try running your sketch in other browsers. Regardless, once a sketch is uploaded to your server, the sketch should work fine on any&amp;nbsp;browser.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://efavdb.com/wp-content/uploads/2014/12/mouseDisplacement.png"&gt;&lt;img alt="" src="https://efavdb.com/wp-content/uploads/2014/12/mouseDisplacement.png"&gt;&lt;/a&gt; 5) Interestingly, when logged in to WordPress, we have found that the Processing apps work, but function as if the mouse were several pixels lower than it actually is. This symptom is only apparent when logged in to WordPress and viewing the page (see example screenshot at&amp;nbsp;right).&lt;/p&gt;
&lt;p&gt;​6) Processing has two rendering modes, &lt;a href="https://www.processing.org/reference/smooth_.html"&gt;smooth&lt;/a&gt; and not smooth. I believe the latter requires less memory to implement, and that this is why it exists. We prefer smooth drawing, and tried to implement this from the start. However, we recently discovered that if you apply coordinate transformations in your processing sketch (translations or rotations), the program forces back to the not smooth mode. This came as a surprise to us, since it&amp;#8217;s not mentioned in any of the basic documentation. Our original &lt;a href="http://efavdb.github.io/nba-dash"&gt;&lt;span class="caps"&gt;NBA&lt;/span&gt; wheel sketch&lt;/a&gt; made use of a translation; we&amp;#8217;ve reimplemented that without it, and see a marked aesthetic&amp;nbsp;improvement.&lt;/p&gt;
&lt;p&gt;​7) We noticed that running our first &lt;a href="http://efavdb.github.io/nba-dash"&gt;&lt;span class="caps"&gt;NBA&lt;/span&gt; wheel sketch&lt;/a&gt; would often cause a laptop to quickly heat up. This was due to the fact that we were having the sketch refresh with a frame rate of about 30 hz, which is totally unnecessary for this particular application. Changing the draw program so that the image refreshes only when some new information is requested totally fixed our heating&amp;nbsp;issues.&lt;/p&gt;</content><category term="Tools"></category><category term="programming"></category><category term="visualization"></category></entry></feed>